//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Flowable.Sdk.Cmmn.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IFlowableCaseHttpClient
    {
        /// <summary>List of historic case instances</summary>
        /// <param name="caseInstanceId">An id of the historic case instance.</param>
        /// <param name="caseDefinitionKey">The process definition key of the historic case instance.</param>
        /// <param name="caseDefinitionId">The process definition id of the historic case instance.</param>
        /// <param name="businessKey">The business key of the historic case instance.</param>
        /// <param name="involvedUser">An involved user of the historic case instance.</param>
        /// <param name="finished">Indication if the historic case instance is finished.</param>
        /// <param name="finishedAfter">Return only historic case instances that were finished after this date.</param>
        /// <param name="finishedBefore">Return only historic case instances that were finished before this date.</param>
        /// <param name="startedAfter">Return only historic case instances that were started after this date.</param>
        /// <param name="startedBefore">Return only historic case instances that were started before this date.</param>
        /// <param name="startedBy">Return only historic case instances that were started by this user.</param>
        /// <param name="includeCaseVariables">An indication if the historic case instance variables should be returned as well.</param>
        /// <param name="tenantId">Only return instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic case instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricCaseInstanceResponse> ListHistoricCaseInstancesAsync(string caseInstanceId, string caseDefinitionKey, string caseDefinitionId, string businessKey, string involvedUser, bool? finished, System.DateTimeOffset? finishedAfter, System.DateTimeOffset? finishedBefore, System.DateTimeOffset? startedAfter, System.DateTimeOffset? startedBefore, string startedBy, bool? includeCaseVariables, string tenantId, bool? withoutTenantId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of historic case instances</summary>
        /// <param name="caseInstanceId">An id of the historic case instance.</param>
        /// <param name="caseDefinitionKey">The process definition key of the historic case instance.</param>
        /// <param name="caseDefinitionId">The process definition id of the historic case instance.</param>
        /// <param name="businessKey">The business key of the historic case instance.</param>
        /// <param name="involvedUser">An involved user of the historic case instance.</param>
        /// <param name="finished">Indication if the historic case instance is finished.</param>
        /// <param name="finishedAfter">Return only historic case instances that were finished after this date.</param>
        /// <param name="finishedBefore">Return only historic case instances that were finished before this date.</param>
        /// <param name="startedAfter">Return only historic case instances that were started after this date.</param>
        /// <param name="startedBefore">Return only historic case instances that were started before this date.</param>
        /// <param name="startedBy">Return only historic case instances that were started by this user.</param>
        /// <param name="includeCaseVariables">An indication if the historic case instance variables should be returned as well.</param>
        /// <param name="tenantId">Only return instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic case instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricCaseInstanceResponse> ListHistoricCaseInstancesAsync(string caseInstanceId, string caseDefinitionKey, string caseDefinitionId, string businessKey, string involvedUser, bool? finished, System.DateTimeOffset? finishedAfter, System.DateTimeOffset? finishedBefore, System.DateTimeOffset? startedAfter, System.DateTimeOffset? startedBefore, string startedBy, bool? includeCaseVariables, string tenantId, bool? withoutTenantId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a historic case instance</summary>
        /// <returns>Indicates that the historic process instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricCaseInstanceResponse> GetHistoricCaseInstanceAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a historic case instance</summary>
        /// <returns>Indicates that the historic process instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricCaseInstanceResponse> GetHistoricCaseInstanceAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a historic case instance</summary>
        /// <returns>Indicates that the historic process instance was deleted.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteHistoricCaseInstanceAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a historic case instance</summary>
        /// <returns>Indicates that the historic process instance was deleted.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteHistoricCaseInstanceAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List identity links of a historic case instance</summary>
        /// <returns>Indicates request was successful and the identity links are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>> ListHistoricCaseInstanceIdentityLinksAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List identity links of a historic case instance</summary>
        /// <returns>Indicates request was successful and the identity links are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>> ListHistoricCaseInstanceIdentityLinksAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StageResponse>> GetStageOverviewAllAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StageResponse>> GetStageOverviewAllAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the binary data for a historic case instance variable</summary>
        /// <returns>Indicates the case instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricCaseInstanceVariableDataAsync(string caseInstanceId, string variableName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a historic case instance variable</summary>
        /// <returns>Indicates the case instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricCaseInstanceVariableDataAsync(string caseInstanceId, string variableName, System.Threading.CancellationToken cancellationToken);

        /// <summary>List of historic milestone instances</summary>
        /// <param name="milestoneId">An id of the historic milestone instance.</param>
        /// <param name="milestoneName">The name of the historic milestone instance</param>
        /// <param name="caseInstanceId">The id of the case instance containing the milestone.</param>
        /// <param name="caseDefinitionId">The id of the definition of the case where the milestone is defined.</param>
        /// <param name="reachedBefore">Return only historic milestone instances that were reached before this date.</param>
        /// <param name="reachedAfter">Return only historic milestone instances that were reached after this date.</param>
        /// <returns>Indicates that historic milestone instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricMilestoneInstanceResponse> ListHistoricMilestoneInstancesAsync(string milestoneId, string milestoneName, string caseInstanceId, string caseDefinitionId, string reachedBefore, string reachedAfter);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of historic milestone instances</summary>
        /// <param name="milestoneId">An id of the historic milestone instance.</param>
        /// <param name="milestoneName">The name of the historic milestone instance</param>
        /// <param name="caseInstanceId">The id of the case instance containing the milestone.</param>
        /// <param name="caseDefinitionId">The id of the definition of the case where the milestone is defined.</param>
        /// <param name="reachedBefore">Return only historic milestone instances that were reached before this date.</param>
        /// <param name="reachedAfter">Return only historic milestone instances that were reached after this date.</param>
        /// <returns>Indicates that historic milestone instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricMilestoneInstanceResponse> ListHistoricMilestoneInstancesAsync(string milestoneId, string milestoneName, string caseInstanceId, string caseDefinitionId, string reachedBefore, string reachedAfter, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a historic milestone instance by id</summary>
        /// <returns>Indicates that the historic milestone instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricMilestoneInstanceResponse> GetHistoricMilestoneInstanceByIdAsync(string milestoneInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a historic milestone instance by id</summary>
        /// <returns>Indicates that the historic milestone instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricMilestoneInstanceResponse> GetHistoricMilestoneInstanceByIdAsync(string milestoneInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List of historic plan item instances</summary>
        /// <param name="planItemInstanceId">The id of the historic planItem instance.</param>
        /// <param name="planItemInstanceName">The name of the historic planItem instance.</param>
        /// <param name="planItemInstanceState">The state of the historic planItem instance.</param>
        /// <param name="caseDefinitionId">The id of the definition of the case were the historic planItem instance is defined.</param>
        /// <param name="caseInstanceId">The id of the case instance were the historic planItem instance existed.</param>
        /// <param name="stageInstanceId">The id of the stage were the historic planItem instance was contained.</param>
        /// <param name="elementId">The id of the planItem model of the historic planItem instance.</param>
        /// <param name="planItemDefinitionId">The id of the planItem model definition of the historic planItem instance.</param>
        /// <param name="planItemDefinitionType">The type of planItem of the historic planItem instance.</param>
        /// <param name="createdBefore">Return only historic planItem instances that were created before this date.</param>
        /// <param name="createdAfter">Return only historic planItem instances that were created after this date.</param>
        /// <param name="lastAvailableBefore">Return only historic planItem instances that were last in available before this date.</param>
        /// <param name="lastAvailableAfter">Return only historic planItem instances that were last in available state after this date.</param>
        /// <param name="lastEnabledBefore">Return only historic planItem instances that were last in enabled state before this date.</param>
        /// <param name="lastEnabledAfter">Return only historic planItem instances that were last in enabled state after this date.</param>
        /// <param name="lastDisabledBefore">Return only historic planItem instances that were last in disable state before this date.</param>
        /// <param name="lastDisabledAfter">Return only historic planItem instances that were last in disabled state after this date.</param>
        /// <param name="lastStartedBefore">Return only historic planItem instances that were last in active state before this date.</param>
        /// <param name="lastStartedAfter">Return only historic planItem instances that were last in active state after this date.</param>
        /// <param name="lastSuspendedBefore">Return only historic planItem instances that were last in suspended state before this date.</param>
        /// <param name="lastSuspendedAfter">Return only historic planItem instances that were last in suspended state after this date.</param>
        /// <param name="completedBefore">Return only historic planItem instances that were completed before this date.</param>
        /// <param name="completedAfter">Return only historic planItem instances that were completed after this date.</param>
        /// <param name="terminatedBefore">Return only historic planItem instances that were terminated before this date.</param>
        /// <param name="terminatedAfter">Return only historic planItem instances that were terminated after this date.</param>
        /// <param name="occurredBefore">Return only historic planItem instances that occurred before this date.</param>
        /// <param name="occurredAfter">Return only historic planItem instances that occurred after after this date.</param>
        /// <param name="exitBefore">Return only historic planItem instances that exit before this date.</param>
        /// <param name="exitAfter">Return only historic planItem instances that exit after this date.</param>
        /// <param name="endedBefore">Return only historic planItem instances that ended before this date.</param>
        /// <param name="endedAfter">Return only historic planItem instances that ended after this date.</param>
        /// <param name="startUserId">Return only historic planItem instances that were started by this user.</param>
        /// <param name="referenceId">The id of process that was referenced by this historic planItem instance.</param>
        /// <param name="referenceType">The type of reference to the process referenced by this historic planItem instance.</param>
        /// <param name="tenantId">Only return instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic planItem instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricPlanItemInstanceResponse> ListHistoricPlanItemInstancesAsync(string planItemInstanceId, string planItemInstanceName, string planItemInstanceState, string caseDefinitionId, string caseInstanceId, string stageInstanceId, string elementId, string planItemDefinitionId, string planItemDefinitionType, object createdBefore, object createdAfter, object lastAvailableBefore, object lastAvailableAfter, object lastEnabledBefore, object lastEnabledAfter, object lastDisabledBefore, object lastDisabledAfter, object lastStartedBefore, object lastStartedAfter, object lastSuspendedBefore, object lastSuspendedAfter, object completedBefore, object completedAfter, object terminatedBefore, object terminatedAfter, object occurredBefore, object occurredAfter, object exitBefore, object exitAfter, object endedBefore, object endedAfter, System.DateTimeOffset? startUserId, string referenceId, string referenceType, string tenantId, bool? withoutTenantId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of historic plan item instances</summary>
        /// <param name="planItemInstanceId">The id of the historic planItem instance.</param>
        /// <param name="planItemInstanceName">The name of the historic planItem instance.</param>
        /// <param name="planItemInstanceState">The state of the historic planItem instance.</param>
        /// <param name="caseDefinitionId">The id of the definition of the case were the historic planItem instance is defined.</param>
        /// <param name="caseInstanceId">The id of the case instance were the historic planItem instance existed.</param>
        /// <param name="stageInstanceId">The id of the stage were the historic planItem instance was contained.</param>
        /// <param name="elementId">The id of the planItem model of the historic planItem instance.</param>
        /// <param name="planItemDefinitionId">The id of the planItem model definition of the historic planItem instance.</param>
        /// <param name="planItemDefinitionType">The type of planItem of the historic planItem instance.</param>
        /// <param name="createdBefore">Return only historic planItem instances that were created before this date.</param>
        /// <param name="createdAfter">Return only historic planItem instances that were created after this date.</param>
        /// <param name="lastAvailableBefore">Return only historic planItem instances that were last in available before this date.</param>
        /// <param name="lastAvailableAfter">Return only historic planItem instances that were last in available state after this date.</param>
        /// <param name="lastEnabledBefore">Return only historic planItem instances that were last in enabled state before this date.</param>
        /// <param name="lastEnabledAfter">Return only historic planItem instances that were last in enabled state after this date.</param>
        /// <param name="lastDisabledBefore">Return only historic planItem instances that were last in disable state before this date.</param>
        /// <param name="lastDisabledAfter">Return only historic planItem instances that were last in disabled state after this date.</param>
        /// <param name="lastStartedBefore">Return only historic planItem instances that were last in active state before this date.</param>
        /// <param name="lastStartedAfter">Return only historic planItem instances that were last in active state after this date.</param>
        /// <param name="lastSuspendedBefore">Return only historic planItem instances that were last in suspended state before this date.</param>
        /// <param name="lastSuspendedAfter">Return only historic planItem instances that were last in suspended state after this date.</param>
        /// <param name="completedBefore">Return only historic planItem instances that were completed before this date.</param>
        /// <param name="completedAfter">Return only historic planItem instances that were completed after this date.</param>
        /// <param name="terminatedBefore">Return only historic planItem instances that were terminated before this date.</param>
        /// <param name="terminatedAfter">Return only historic planItem instances that were terminated after this date.</param>
        /// <param name="occurredBefore">Return only historic planItem instances that occurred before this date.</param>
        /// <param name="occurredAfter">Return only historic planItem instances that occurred after after this date.</param>
        /// <param name="exitBefore">Return only historic planItem instances that exit before this date.</param>
        /// <param name="exitAfter">Return only historic planItem instances that exit after this date.</param>
        /// <param name="endedBefore">Return only historic planItem instances that ended before this date.</param>
        /// <param name="endedAfter">Return only historic planItem instances that ended after this date.</param>
        /// <param name="startUserId">Return only historic planItem instances that were started by this user.</param>
        /// <param name="referenceId">The id of process that was referenced by this historic planItem instance.</param>
        /// <param name="referenceType">The type of reference to the process referenced by this historic planItem instance.</param>
        /// <param name="tenantId">Only return instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic planItem instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricPlanItemInstanceResponse> ListHistoricPlanItemInstancesAsync(string planItemInstanceId, string planItemInstanceName, string planItemInstanceState, string caseDefinitionId, string caseInstanceId, string stageInstanceId, string elementId, string planItemDefinitionId, string planItemDefinitionType, object createdBefore, object createdAfter, object lastAvailableBefore, object lastAvailableAfter, object lastEnabledBefore, object lastEnabledAfter, object lastDisabledBefore, object lastDisabledAfter, object lastStartedBefore, object lastStartedAfter, object lastSuspendedBefore, object lastSuspendedAfter, object completedBefore, object completedAfter, object terminatedBefore, object terminatedAfter, object occurredBefore, object occurredAfter, object exitBefore, object exitAfter, object endedBefore, object endedAfter, System.DateTimeOffset? startUserId, string referenceId, string referenceType, string tenantId, bool? withoutTenantId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a historic plan item instance</summary>
        /// <returns>Indicates that the historic plan item instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricPlanItemInstanceResponse> GetHistoricPlanItemInstanceAsync(string planItemInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a historic plan item instance</summary>
        /// <returns>Indicates that the historic plan item instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricPlanItemInstanceResponse> GetHistoricPlanItemInstanceAsync(string planItemInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List historic task instances</summary>
        /// <param name="taskId">An id of the historic task instance.</param>
        /// <param name="caseInstanceId">The case instance id of the historic task instance.</param>
        /// <param name="caseInstanceIdWithChildren">Selects the historic task instance of a case instance and its children.</param>
        /// <param name="caseDefinitionId">The case definition id of the historic task instance.</param>
        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process</param>
        /// <param name="taskName">The task name of the historic task instance.</param>
        /// <param name="taskNameLike">The task name with like operator for the historic task instance.</param>
        /// <param name="taskDescription">The task description of the historic task instance.</param>
        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance.</param>
        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).</param>
        /// <param name="taskDeleteReason">The task delete reason of the historic task instance.</param>
        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance.</param>
        /// <param name="taskAssignee">The assignee of the historic task instance.</param>
        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance.</param>
        /// <param name="taskOwner">The owner of the historic task instance.</param>
        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance.</param>
        /// <param name="taskInvolvedUser">An involved user of the historic task instance</param>
        /// <param name="taskPriority">The priority of the historic task instance.</param>
        /// <param name="finished">Indication if the historic task instance is finished.</param>
        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished.</param>
        /// <param name="parentTaskId">An optional parent task id of the historic task instance.</param>
        /// <param name="dueDate">Return only historic task instances that have a due date equal this date.</param>
        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date.</param>
        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date.</param>
        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored.</param>
        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date.</param>
        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date.</param>
        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date.</param>
        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date.</param>
        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date.</param>
        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date.</param>
        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well.</param>
        /// <param name="tenantId">Only return historic task instances with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic task instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricTaskInstanceResponse> ListHistoricTaskInstancesAsync(string taskId, string caseInstanceId, string caseInstanceIdWithChildren, string caseDefinitionId, string taskDefinitionKey, string taskName, string taskNameLike, string taskDescription, string taskDescriptionLike, string taskCategory, string taskDeleteReason, string taskDeleteReasonLike, string taskAssignee, string taskAssigneeLike, string taskOwner, string taskOwnerLike, string taskInvolvedUser, string taskPriority, bool? finished, bool? processFinished, string parentTaskId, System.DateTimeOffset? dueDate, System.DateTimeOffset? dueDateAfter, System.DateTimeOffset? dueDateBefore, bool? withoutDueDate, System.DateTimeOffset? taskCompletedOn, System.DateTimeOffset? taskCompletedAfter, System.DateTimeOffset? taskCompletedBefore, System.DateTimeOffset? taskCreatedOn, System.DateTimeOffset? taskCreatedBefore, System.DateTimeOffset? taskCreatedAfter, bool? includeTaskLocalVariables, string tenantId, string tenantIdLike, bool? withoutTenantId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List historic task instances</summary>
        /// <param name="taskId">An id of the historic task instance.</param>
        /// <param name="caseInstanceId">The case instance id of the historic task instance.</param>
        /// <param name="caseInstanceIdWithChildren">Selects the historic task instance of a case instance and its children.</param>
        /// <param name="caseDefinitionId">The case definition id of the historic task instance.</param>
        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process</param>
        /// <param name="taskName">The task name of the historic task instance.</param>
        /// <param name="taskNameLike">The task name with like operator for the historic task instance.</param>
        /// <param name="taskDescription">The task description of the historic task instance.</param>
        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance.</param>
        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).</param>
        /// <param name="taskDeleteReason">The task delete reason of the historic task instance.</param>
        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance.</param>
        /// <param name="taskAssignee">The assignee of the historic task instance.</param>
        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance.</param>
        /// <param name="taskOwner">The owner of the historic task instance.</param>
        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance.</param>
        /// <param name="taskInvolvedUser">An involved user of the historic task instance</param>
        /// <param name="taskPriority">The priority of the historic task instance.</param>
        /// <param name="finished">Indication if the historic task instance is finished.</param>
        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished.</param>
        /// <param name="parentTaskId">An optional parent task id of the historic task instance.</param>
        /// <param name="dueDate">Return only historic task instances that have a due date equal this date.</param>
        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date.</param>
        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date.</param>
        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored.</param>
        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date.</param>
        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date.</param>
        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date.</param>
        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date.</param>
        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date.</param>
        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date.</param>
        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well.</param>
        /// <param name="tenantId">Only return historic task instances with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic task instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricTaskInstanceResponse> ListHistoricTaskInstancesAsync(string taskId, string caseInstanceId, string caseInstanceIdWithChildren, string caseDefinitionId, string taskDefinitionKey, string taskName, string taskNameLike, string taskDescription, string taskDescriptionLike, string taskCategory, string taskDeleteReason, string taskDeleteReasonLike, string taskAssignee, string taskAssigneeLike, string taskOwner, string taskOwnerLike, string taskInvolvedUser, string taskPriority, bool? finished, bool? processFinished, string parentTaskId, System.DateTimeOffset? dueDate, System.DateTimeOffset? dueDateAfter, System.DateTimeOffset? dueDateBefore, bool? withoutDueDate, System.DateTimeOffset? taskCompletedOn, System.DateTimeOffset? taskCompletedAfter, System.DateTimeOffset? taskCompletedBefore, System.DateTimeOffset? taskCreatedOn, System.DateTimeOffset? taskCreatedBefore, System.DateTimeOffset? taskCreatedAfter, bool? includeTaskLocalVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a single historic task instance</summary>
        /// <returns>Indicates that the historic task instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricTaskInstanceResponse> GetTaskInstanceAsync(string taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single historic task instance</summary>
        /// <returns>Indicates that the historic task instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricTaskInstanceResponse> GetTaskInstanceAsync(string taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a historic task instance</summary>
        /// <returns>Indicates that the historic task instance was deleted.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskInstanceAsync(string taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a historic task instance</summary>
        /// <returns>Indicates that the historic task instance was deleted.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskInstanceAsync(string taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a historic task instance form</summary>
        /// <returns>Indicates request was successful and the task form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetTaskFormAsync(string taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a historic task instance form</summary>
        /// <returns>Indicates request was successful and the task form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetTaskFormAsync(string taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List identity links of a historic task instance</summary>
        /// <returns>Indicates request was successful and the identity links are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>> ListHistoricTaskInstanceIdentityLinksAsync(string taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List identity links of a historic task instance</summary>
        /// <returns>Indicates request was successful and the identity links are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>> ListHistoricTaskInstanceIdentityLinksAsync(string taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the binary data for a historic task instance variable</summary>
        /// <returns>Indicates the task instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricTaskInstanceVariableDataAsync(string taskId, string variableName, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a historic task instance variable</summary>
        /// <returns>Indicates the task instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricTaskInstanceVariableDataAsync(string taskId, string variableName, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>List of historic variable instances</summary>
        /// <param name="caseInstanceId">The case instance id of the historic variable instance.</param>
        /// <param name="taskId">The task id of the historic variable instance.</param>
        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result.</param>
        /// <param name="variableName">The variable name of the historic variable instance.</param>
        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance.</param>
        /// <returns>Indicates that historic variable instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricVariableInstanceResponse> ListHistoricVariableInstancesAsync(string caseInstanceId, string taskId, bool? excludeTaskVariables, string variableName, string variableNameLike);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of historic variable instances</summary>
        /// <param name="caseInstanceId">The case instance id of the historic variable instance.</param>
        /// <param name="taskId">The task id of the historic variable instance.</param>
        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result.</param>
        /// <param name="variableName">The variable name of the historic variable instance.</param>
        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance.</param>
        /// <returns>Indicates that historic variable instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricVariableInstanceResponse> ListHistoricVariableInstancesAsync(string caseInstanceId, string taskId, bool? excludeTaskVariables, string variableName, string variableNameLike, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the binary data for a historic task instance variable</summary>
        /// <returns>Indicates the variable instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricInstanceVariableDataAsync(string varInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a historic task instance variable</summary>
        /// <returns>Indicates the variable instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricInstanceVariableDataAsync(string varInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List deadletter jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseJobResponse> ListDeadLetterJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List deadletter jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseJobResponse> ListDeadLetterJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a single deadletter job</summary>
        /// <returns>Indicates the suspended job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobResponse> GetDeadletterJobAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single deadletter job</summary>
        /// <returns>Indicates the suspended job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobResponse> GetDeadletterJobAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Move a single deadletter job</summary>
        /// <returns>Indicates the dead letter job was moved. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecuteDeadLetterJobActionAsync(string jobId, RestActionRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Move a single deadletter job</summary>
        /// <returns>Indicates the dead letter job was moved. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecuteDeadLetterJobActionAsync(string jobId, RestActionRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a deadletter job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDeadLetterJobAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a deadletter job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDeadLetterJobAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the exception stacktrace for a deadletter job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetDeadLetterJobStacktraceAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the exception stacktrace for a deadletter job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetDeadLetterJobStacktraceAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get engine info</summary>
        /// <returns>Indicates the engine info is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CmmnEngineInfoResponse> GetEngineInfoAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get engine info</summary>
        /// <returns>Indicates the engine info is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CmmnEngineInfoResponse> GetEngineInfoAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>List jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseJobResponse> ListJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort2? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseJobResponse> ListJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort2? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a single job</summary>
        /// <returns>Indicates the job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobResponse> GetJobAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single job</summary>
        /// <returns>Indicates the job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobResponse> GetJobAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Execute a single job</summary>
        /// <returns>Indicates the job was executed. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecuteJobActionAsync(string jobId, RestActionRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Execute a single job</summary>
        /// <returns>Indicates the job was executed. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecuteJobActionAsync(string jobId, RestActionRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteJobAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteJobAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the exception stacktrace for a job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetJobStacktraceAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the exception stacktrace for a job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetJobStacktraceAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List suspended jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseJobResponse> ListSuspendedJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort3? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List suspended jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseJobResponse> ListSuspendedJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort3? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a single suspended job</summary>
        /// <returns>Indicates the suspended job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobResponse> GetSuspendedJobAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single suspended job</summary>
        /// <returns>Indicates the suspended job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobResponse> GetSuspendedJobAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a suspended job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSuspendedJobAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a suspended job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSuspendedJobAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the exception stacktrace for a suspended job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSuspendedJobStacktraceAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the exception stacktrace for a suspended job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetSuspendedJobStacktraceAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List timer jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseJobResponse> ListTimerJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort4? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List timer jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseJobResponse> ListTimerJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort4? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a single timer job</summary>
        /// <returns>Indicates the timer job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobResponse> GetTimerJobAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single timer job</summary>
        /// <returns>Indicates the timer job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JobResponse> GetTimerJobAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Move a single timer job</summary>
        /// <returns>Indicates the timer job was moved. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecuteTimerJobActionAsync(string jobId, RestActionRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Move a single timer job</summary>
        /// <returns>Indicates the timer job was moved. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecuteTimerJobActionAsync(string jobId, RestActionRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a timer job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTimerJobAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a timer job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTimerJobAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the exception stacktrace for a timer job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetTimerJobStacktraceAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the exception stacktrace for a timer job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetTimerJobStacktraceAsync(string jobId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Query case instances</summary>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseCaseInstanceResponse> QueryCaseInstancesAsync(CaseInstanceQueryRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query case instances</summary>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseCaseInstanceResponse> QueryCaseInstancesAsync(CaseInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Query for historic case instances</summary>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricCaseInstanceResponse> QueryHistoricCaseInstanceAsync(HistoricCaseInstanceQueryRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic case instances</summary>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricCaseInstanceResponse> QueryHistoricCaseInstanceAsync(HistoricCaseInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Query for historic milestone instances</summary>
        /// <returns>Indicates request was successful and the milestone instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricMilestoneInstanceResponse> QueryHistoricMilestoneInstanceAsync(HistoricMilestoneInstanceQueryRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic milestone instances</summary>
        /// <returns>Indicates request was successful and the milestone instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricMilestoneInstanceResponse> QueryHistoricMilestoneInstanceAsync(HistoricMilestoneInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Query for historic plan item instances</summary>
        /// <returns>Indicates request was successful and the plan item instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricPlanItemInstanceResponse> QueryHistoricPlanItemInstanceAsync(HistoricPlanItemInstanceQueryRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic plan item instances</summary>
        /// <returns>Indicates request was successful and the plan item instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricPlanItemInstanceResponse> QueryHistoricPlanItemInstanceAsync(HistoricPlanItemInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Query for historic task instances</summary>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricTaskInstanceResponse> QueryHistoricTaskInstanceAsync(HistoricTaskInstanceQueryRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic task instances</summary>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricTaskInstanceResponse> QueryHistoricTaskInstanceAsync(HistoricTaskInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Query for historic variable instances</summary>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricVariableInstanceResponse> QueryVariableInstancesAsync(HistoricVariableInstanceQueryRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic variable instances</summary>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseHistoricVariableInstanceResponse> QueryVariableInstancesAsync(HistoricVariableInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Query plan item instances</summary>
        /// <returns>Indicates request was successful and the plan item instances are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponsePlanItemInstanceResponse> QueryPlanItemInstancesAsync(PlanItemInstanceQueryRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query plan item instances</summary>
        /// <returns>Indicates request was successful and the plan item instances are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponsePlanItemInstanceResponse> QueryPlanItemInstancesAsync(PlanItemInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Query for tasks</summary>
        /// <returns>Indicates request was successful and the tasks are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseTaskResponse> QueryTasksAsync(TaskQueryRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for tasks</summary>
        /// <returns>Indicates request was successful and the tasks are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseTaskResponse> QueryTasksAsync(TaskQueryRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>List of case definitions</summary>
        /// <param name="version">Only return case definitions with the given version.</param>
        /// <param name="name">Only return case definitions with the given name.</param>
        /// <param name="nameLike">Only return case definitions with a name like the given name.</param>
        /// <param name="key">Only return case definitions with the given key.</param>
        /// <param name="keyLike">Only return case definitions with a name like the given key.</param>
        /// <param name="resourceName">Only return case definitions with the given resource name.</param>
        /// <param name="resourceNameLike">Only return case definitions with a name like the given resource name.</param>
        /// <param name="category">Only return case definitions with the given category.</param>
        /// <param name="categoryLike">Only return case definitions with a category like the given name.</param>
        /// <param name="categoryNotEquals">Only return case definitions which do not have the given category.</param>
        /// <param name="deploymentId">Only return case definitions with the given category.</param>
        /// <param name="startableByUser">Only return case definitions which are part of a deployment with the given id.</param>
        /// <param name="latest">Only return the latest case definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response.</param>
        /// <param name="suspended">If true, only returns case definitions which are suspended. If false, only active process definitions (which are not suspended) are returned.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseCaseDefinitionResponse> ListCaseDefinitionsAsync(int? version, string name, string nameLike, string key, string keyLike, string resourceName, string resourceNameLike, string category, string categoryLike, string categoryNotEquals, string deploymentId, string startableByUser, bool? latest, bool? suspended, Sort5? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of case definitions</summary>
        /// <param name="version">Only return case definitions with the given version.</param>
        /// <param name="name">Only return case definitions with the given name.</param>
        /// <param name="nameLike">Only return case definitions with a name like the given name.</param>
        /// <param name="key">Only return case definitions with the given key.</param>
        /// <param name="keyLike">Only return case definitions with a name like the given key.</param>
        /// <param name="resourceName">Only return case definitions with the given resource name.</param>
        /// <param name="resourceNameLike">Only return case definitions with a name like the given resource name.</param>
        /// <param name="category">Only return case definitions with the given category.</param>
        /// <param name="categoryLike">Only return case definitions with a category like the given name.</param>
        /// <param name="categoryNotEquals">Only return case definitions which do not have the given category.</param>
        /// <param name="deploymentId">Only return case definitions with the given category.</param>
        /// <param name="startableByUser">Only return case definitions which are part of a deployment with the given id.</param>
        /// <param name="latest">Only return the latest case definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response.</param>
        /// <param name="suspended">If true, only returns case definitions which are suspended. If false, only active process definitions (which are not suspended) are returned.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseCaseDefinitionResponse> ListCaseDefinitionsAsync(int? version, string name, string nameLike, string key, string keyLike, string resourceName, string resourceNameLike, string category, string categoryLike, string categoryNotEquals, string deploymentId, string startableByUser, bool? latest, bool? suspended, Sort5? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a case definition</summary>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseDefinitionResponse> GetCaseDefinitionAsync(string caseDefinitionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition</summary>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseDefinitionResponse> GetCaseDefinitionAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Execute actions for a case definition</summary>
        /// <returns>Indicates action has been executed for the specified process. (category altered)</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseDefinitionResponse> ExecuteCaseDefinitionActionAsync(string caseDefinitionId, CaseDefinitionActionRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Execute actions for a case definition</summary>
        /// <returns>Indicates action has been executed for the specified process. (category altered)</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseDefinitionResponse> ExecuteCaseDefinitionActionAsync(string caseDefinitionId, CaseDefinitionActionRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>List decision tables for a case definition</summary>
        /// <returns>Indicates the case definition was found and the decision tables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DmnDecisionTable>> ListCaseDefinitionDecisionTablesAsync(string caseDefinitionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List decision tables for a case definition</summary>
        /// <returns>Indicates the case definition was found and the decision tables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DmnDecisionTable>> ListCaseDefinitionDecisionTablesAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List form definitions for a case definition</summary>
        /// <returns>Indicates the case definition was found and the form definitions are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FormDefinition>> ListCaseDefinitionFormDefinitionsAsync(string caseDefinitionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List form definitions for a case definition</summary>
        /// <returns>Indicates the case definition was found and the form definitions are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FormDefinition>> ListCaseDefinitionFormDefinitionsAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List candidate starters for a case definition</summary>
        /// <returns>Indicates the case definition was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListCaseDefinitionIdentityLinksAsync(string caseDefinitionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List candidate starters for a case definition</summary>
        /// <returns>Indicates the case definition was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListCaseDefinitionIdentityLinksAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Add a candidate starter to a case definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> CreateIdentityLinkAsync(string caseDefinitionId, RestIdentityLink body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a candidate starter to a case definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> CreateIdentityLinkAsync(string caseDefinitionId, RestIdentityLink body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a candidate starter from a case definition</summary>
        /// <returns>Indicates the case definition was found and the identity link was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> GetIdentityLinkAsync(string caseDefinitionId, string family, string identityId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a candidate starter from a case definition</summary>
        /// <returns>Indicates the case definition was found and the identity link was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> GetIdentityLinkAsync(string caseDefinitionId, string family, string identityId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a candidate starter from a case definition</summary>
        /// <returns>Indicates the case definition was found and the identity link was removed. The response body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteIdentityLinkAsync(string caseDefinitionId, string family, string identityId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a candidate starter from a case definition</summary>
        /// <returns>Indicates the case definition was found and the identity link was removed. The response body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteIdentityLinkAsync(string caseDefinitionId, string family, string identityId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a case definition image</summary>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetImageResourceAsync(string caseDefinitionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition image</summary>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetImageResourceAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a case definition CMMN model</summary>
        /// <returns>Indicates the process definition was found and the model is returned. The response contains the full process definition model.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CmmnModel> GetCmmnModelResourceAsync(string caseDefinitionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition CMMN model</summary>
        /// <returns>Indicates the process definition was found and the model is returned. The response contains the full process definition model.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CmmnModel> GetCmmnModelResourceAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a case definition resource content</summary>
        /// <returns>Indicates both case definition and resource have been found and the resource data has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetProcessDefinitionResourceAsync(string caseDefinitionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition resource content</summary>
        /// <returns>Indicates both case definition and resource have been found and the resource data has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetProcessDefinitionResourceAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a case definition start form</summary>
        /// <returns>Indicates request was successful and the case definition form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetProcessDefinitionStartFormAsync(string caseDefinitionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition start form</summary>
        /// <returns>Indicates request was successful and the case definition form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetProcessDefinitionStartFormAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List Deployments</summary>
        /// <param name="name">Only return deployments with the given name.</param>
        /// <param name="nameLike">Only return deployments with a name like the given name.</param>
        /// <param name="category">Only return deployments with the given category.</param>
        /// <param name="categoryNotEquals">Only return deployments which do not have the given category.</param>
        /// <param name="parentDeploymentId">Only return deployments with the given parent deployment id.</param>
        /// <param name="parentDeploymentIdLike">Only return deployments with a parent deployment id like the given value.</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value.</param>
        /// <param name="tenantId">Only return deployments with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the request was successful.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseCmmnDeploymentResponse> ListDeploymentsAsync(string name, string nameLike, string category, string categoryNotEquals, string parentDeploymentId, string parentDeploymentIdLike, string tenantIdLike, string tenantId, bool? withoutTenantId, Sort6? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List Deployments</summary>
        /// <param name="name">Only return deployments with the given name.</param>
        /// <param name="nameLike">Only return deployments with a name like the given name.</param>
        /// <param name="category">Only return deployments with the given category.</param>
        /// <param name="categoryNotEquals">Only return deployments which do not have the given category.</param>
        /// <param name="parentDeploymentId">Only return deployments with the given parent deployment id.</param>
        /// <param name="parentDeploymentIdLike">Only return deployments with a parent deployment id like the given value.</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value.</param>
        /// <param name="tenantId">Only return deployments with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the request was successful.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseCmmnDeploymentResponse> ListDeploymentsAsync(string name, string nameLike, string category, string categoryNotEquals, string parentDeploymentId, string parentDeploymentIdLike, string tenantIdLike, string tenantId, bool? withoutTenantId, Sort6? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create a new deployment</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CmmnDeploymentResponse> UploadDeploymentAsync(string deploymentKey, string deploymentName, string tenantId, FileParameter file);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new deployment</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CmmnDeploymentResponse> UploadDeploymentAsync(string deploymentKey, string deploymentName, string tenantId, FileParameter file, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a deployment</summary>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>Indicates the deployment was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CmmnDeploymentResponse> GetDeploymentAsync(string deploymentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a deployment</summary>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>Indicates the deployment was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CmmnDeploymentResponse> GetDeploymentAsync(string deploymentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a deployment</summary>
        /// <returns>Indicates the deployment was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDeploymentAsync(string deploymentId, bool? cascade);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a deployment</summary>
        /// <returns>Indicates the deployment was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDeploymentAsync(string deploymentId, bool? cascade, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a deployment resource content</summary>
        /// <param name="resourceName">The name of the resource to get. Make sure you URL-encode the resourceName in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/my-process.bpmn20.xml.</param>
        /// <returns>Indicates both deployment and resource have been found and the resource data has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetDeploymentResourceDataAsync(string deploymentId, string resourceName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a deployment resource content</summary>
        /// <param name="resourceName">The name of the resource to get. Make sure you URL-encode the resourceName in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/my-process.bpmn20.xml.</param>
        /// <returns>Indicates both deployment and resource have been found and the resource data has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetDeploymentResourceDataAsync(string deploymentId, string resourceName, System.Threading.CancellationToken cancellationToken);

        /// <summary>List resources in a deployment</summary>
        /// <returns>Indicates the deployment was found and the resource list has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentResourceResponse>> ListDeploymentResourcesAsync(string deploymentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List resources in a deployment</summary>
        /// <returns>Indicates the deployment was found and the resource list has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentResourceResponse>> ListDeploymentResourcesAsync(string deploymentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a deployment resource</summary>
        /// <returns>Indicates both deployment and resource have been found and the resource has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentResourceResponse> GetDeploymentResourceAsync(string deploymentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a deployment resource</summary>
        /// <returns>Indicates both deployment and resource have been found and the resource has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeploymentResourceResponse> GetDeploymentResourceAsync(string deploymentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List case instances</summary>
        /// <param name="id">Only return models with the given version.</param>
        /// <param name="caseDefinitionKey">Only return case instances with the given case definition key.</param>
        /// <param name="caseDefinitionId">Only return case instances with the given case definition id.</param>
        /// <param name="businessKey">Only return case instances with the given businessKey.</param>
        /// <param name="superCaseInstanceId">Only return case instances which have the given super case instance id (for cases that have a case tasks).</param>
        /// <param name="includeCaseVariables">Indication to include case variables in the result.</param>
        /// <param name="tenantId">Only return case instances with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return case instances with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns case instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseCaseInstanceResponse> ListCaseInstancesAsync(string id, string caseDefinitionKey, string caseDefinitionId, string businessKey, string superCaseInstanceId, bool? includeCaseVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, Sort7? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List case instances</summary>
        /// <param name="id">Only return models with the given version.</param>
        /// <param name="caseDefinitionKey">Only return case instances with the given case definition key.</param>
        /// <param name="caseDefinitionId">Only return case instances with the given case definition id.</param>
        /// <param name="businessKey">Only return case instances with the given businessKey.</param>
        /// <param name="superCaseInstanceId">Only return case instances which have the given super case instance id (for cases that have a case tasks).</param>
        /// <param name="includeCaseVariables">Indication to include case variables in the result.</param>
        /// <param name="tenantId">Only return case instances with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return case instances with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns case instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseCaseInstanceResponse> ListCaseInstancesAsync(string id, string caseDefinitionKey, string caseDefinitionId, string businessKey, string superCaseInstanceId, bool? includeCaseVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, Sort7? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>Start a case instance</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseInstanceResponse> CreateCaseInstanceAsync(CaseInstanceCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a case instance</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseInstanceResponse> CreateCaseInstanceAsync(CaseInstanceCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a case instance</summary>
        /// <returns>Indicates the case instance was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseInstanceResponse> GetCaseInstanceAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case instance</summary>
        /// <returns>Indicates the case instance was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseInstanceResponse> GetCaseInstanceAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Execute an action on a case instance</summary>
        /// <returns>Indicates the case instance was found and the action is performed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseInstanceResponse> PerformCaseInstanceActionAsync(string caseInstanceId, RestActionRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Execute an action on a case instance</summary>
        /// <returns>Indicates the case instance was found and the action is performed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CaseInstanceResponse> PerformCaseInstanceActionAsync(string caseInstanceId, RestActionRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a case instance</summary>
        /// <returns>Indicates the case instance was found and deleted. Response body is left empty intentionally.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCaseInstanceAsync(string caseInstanceId, string deleteReason);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a case instance</summary>
        /// <returns>Indicates the case instance was found and deleted. Response body is left empty intentionally.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCaseInstanceAsync(string caseInstanceId, string deleteReason, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get diagram for a case instance</summary>
        /// <returns>Indicates the case instance was found and the diagram was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetCaseInstanceDiagramAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get diagram for a case instance</summary>
        /// <returns>Indicates the case instance was found and the diagram was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetCaseInstanceDiagramAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get involved people for case instance</summary>
        /// <returns>Indicates the case instance was found and links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListCaseInstanceIdentityLinksAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get involved people for case instance</summary>
        /// <returns>Indicates the case instance was found and links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListCaseInstanceIdentityLinksAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Add an involved user to a case instance</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> CreateCaseInstanceIdentityLinksAsync(string caseInstanceId, RestIdentityLink body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add an involved user to a case instance</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> CreateCaseInstanceIdentityLinksAsync(string caseInstanceId, RestIdentityLink body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a specific involved people from case instance</summary>
        /// <returns>Indicates the case instance was found and the specified link is retrieved.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> GetCaseInstanceIdentityLinksAsync(string caseInstanceId, string identityId, string type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a specific involved people from case instance</summary>
        /// <returns>Indicates the case instance was found and the specified link is retrieved.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> GetCaseInstanceIdentityLinksAsync(string caseInstanceId, string identityId, string type, System.Threading.CancellationToken cancellationToken);

        /// <summary>Remove an involved user to from case instance</summary>
        /// <returns>Indicates the case instance was found and the link has been deleted. Response body is left empty intentionally.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCaseInstanceIdentityLinksAsync(string caseInstanceId, string identityId, string type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove an involved user to from case instance</summary>
        /// <returns>Indicates the case instance was found and the link has been deleted. Response body is left empty intentionally.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCaseInstanceIdentityLinksAsync(string caseInstanceId, string identityId, string type, System.Threading.CancellationToken cancellationToken);

        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StageResponse>> GetStageOverviewAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StageResponse>> GetStageOverviewAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List variables for a case instance</summary>
        /// <returns>Indicates the case instance was found and variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestVariable>> ListCaseInstanceVariablesAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List variables for a case instance</summary>
        /// <returns>Indicates the case instance was found and variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestVariable>> ListCaseInstanceVariablesAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create variables or new binary variable on a case instance</summary>
        /// <param name="body">Create a variable on a case instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateCaseInstanceVariableAsync(string caseInstanceId, CaseInstanceVariableCollectionResource body, FileParameter file, string name, string type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create variables or new binary variable on a case instance</summary>
        /// <param name="body">Create a variable on a case instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateCaseInstanceVariableAsync(string caseInstanceId, CaseInstanceVariableCollectionResource body, FileParameter file, string name, string type, System.Threading.CancellationToken cancellationToken);

        /// <summary>Update a multiple/single (non)binary variable on a case instance</summary>
        /// <param name="body">Create a variable on a process instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateCaseVariableAsync(string caseInstanceId, CaseInstanceVariableCollectionResource body, FileParameter file, string name, string type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a multiple/single (non)binary variable on a case instance</summary>
        /// <param name="body">Create a variable on a process instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateCaseVariableAsync(string caseInstanceId, CaseInstanceVariableCollectionResource body, FileParameter file, string name, string type, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete all variables</summary>
        /// <returns>Indicates variables were found and have been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCaseVariableAsync(string caseInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete all variables</summary>
        /// <returns>Indicates variables were found and have been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCaseVariableAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a variable for a case instance</summary>
        /// <returns>Indicates both the case instance and variable were found and variable is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestVariable> GetCaseInstanceVariableAsync(string caseInstanceId, string variableName, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a variable for a case instance</summary>
        /// <returns>Indicates both the case instance and variable were found and variable is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestVariable> GetCaseInstanceVariableAsync(string caseInstanceId, string variableName, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>Update a single variable on a case instance</summary>
        /// <param name="body">Create a variable on a case instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestVariable> UpdateCaseInstanceVariableAsync(string caseInstanceId, string variableName, CaseInstanceVariableResource body, FileParameter file, string name, string type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a single variable on a case instance</summary>
        /// <param name="body">Create a variable on a case instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestVariable> UpdateCaseInstanceVariableAsync(string caseInstanceId, string variableName, CaseInstanceVariableResource body, FileParameter file, string name, string type, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a variable</summary>
        /// <returns>Indicates the variable was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCaseInstanceVariableAsync(string caseInstanceId, string variableName, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a variable</summary>
        /// <returns>Indicates the variable was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCaseInstanceVariableAsync(string caseInstanceId, string variableName, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the binary data for a variable</summary>
        /// <returns>Indicates the case instance was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetCaseInstanceVariableDataAsync(string caseInstanceId, string variableName, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a variable</summary>
        /// <returns>Indicates the case instance was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetCaseInstanceVariableDataAsync(string caseInstanceId, string variableName, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>List of plan item instances</summary>
        /// <param name="id">Only return models with the given version.</param>
        /// <param name="caseDefinitionId">Only return plan item instances with the given case definition id.</param>
        /// <param name="caseInstanceId">Only return plan item instances which are part of the case instance with the given id.</param>
        /// <param name="stageInstanceId">Only return plan item instances which are part of the given stage instance.</param>
        /// <param name="planItemDefinitionId">Only return plan item instances which have the given plan item definition id.</param>
        /// <param name="planItemDefinitionType">Only return plan item instances which have the given plan item definition type.</param>
        /// <param name="planItemDefinitionTypes">Only return plan item instances which have any of the given plan item definition types. Comma-separated string e.g. humantask, stage</param>
        /// <param name="state">Only return plan item instances which have the given state.</param>
        /// <param name="name">Only return plan item instances which have the given name.</param>
        /// <param name="elementId">Only return plan item instances which have the given element id.</param>
        /// <param name="referenceId">Only return plan item instances which have the given reference id.</param>
        /// <param name="referenceType">Only return plan item instances which have the given reference type.</param>
        /// <param name="createdBefore">Only return plan item instances which are created before the given date.</param>
        /// <param name="createdAfter">Only return plan item instances which are created after the given date.</param>
        /// <param name="startUserId">Only return plan item instances which are started by the given user id.</param>
        /// <param name="tenantId">Only return plan item instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns plan item instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the executions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponsePlanItemInstanceResponse> ListPlanItemInstancesAsync(string id, string caseDefinitionId, string caseInstanceId, string stageInstanceId, string planItemDefinitionId, string planItemDefinitionType, string planItemDefinitionTypes, string state, string name, string elementId, string referenceId, string referenceType, object createdBefore, object createdAfter, string startUserId, string tenantId, bool? withoutTenantId, Sort8? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of plan item instances</summary>
        /// <param name="id">Only return models with the given version.</param>
        /// <param name="caseDefinitionId">Only return plan item instances with the given case definition id.</param>
        /// <param name="caseInstanceId">Only return plan item instances which are part of the case instance with the given id.</param>
        /// <param name="stageInstanceId">Only return plan item instances which are part of the given stage instance.</param>
        /// <param name="planItemDefinitionId">Only return plan item instances which have the given plan item definition id.</param>
        /// <param name="planItemDefinitionType">Only return plan item instances which have the given plan item definition type.</param>
        /// <param name="planItemDefinitionTypes">Only return plan item instances which have any of the given plan item definition types. Comma-separated string e.g. humantask, stage</param>
        /// <param name="state">Only return plan item instances which have the given state.</param>
        /// <param name="name">Only return plan item instances which have the given name.</param>
        /// <param name="elementId">Only return plan item instances which have the given element id.</param>
        /// <param name="referenceId">Only return plan item instances which have the given reference id.</param>
        /// <param name="referenceType">Only return plan item instances which have the given reference type.</param>
        /// <param name="createdBefore">Only return plan item instances which are created before the given date.</param>
        /// <param name="createdAfter">Only return plan item instances which are created after the given date.</param>
        /// <param name="startUserId">Only return plan item instances which are started by the given user id.</param>
        /// <param name="tenantId">Only return plan item instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns plan item instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the executions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponsePlanItemInstanceResponse> ListPlanItemInstancesAsync(string id, string caseDefinitionId, string caseInstanceId, string stageInstanceId, string planItemDefinitionId, string planItemDefinitionType, string planItemDefinitionTypes, string state, string name, string elementId, string referenceId, string referenceType, object createdBefore, object createdAfter, string startUserId, string tenantId, bool? withoutTenantId, Sort8? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get an plan item instance</summary>
        /// <returns>Indicates the plan item instance was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlanItemInstanceResponse> GetPlanItemInstanceAsync(string planItemInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an plan item instance</summary>
        /// <returns>Indicates the plan item instance was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlanItemInstanceResponse> GetPlanItemInstanceAsync(string planItemInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Execute an action on a plan item instance</summary>
        /// <returns>Indicates the plan item instance was found and the action is performed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlanItemInstanceResponse> PerformPlanItemInstanceActionAsync(string planItemInstanceId, RestActionRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Execute an action on a plan item instance</summary>
        /// <returns>Indicates the plan item instance was found and the action is performed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlanItemInstanceResponse> PerformPlanItemInstanceActionAsync(string planItemInstanceId, RestActionRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>List of tasks</summary>
        /// <param name="name">Only return models with the given version.</param>
        /// <param name="nameLike">Only return tasks with a name like the given name.</param>
        /// <param name="description">Only return tasks with the given description.</param>
        /// <param name="priority">Only return tasks with the given priority.</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value.</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value.</param>
        /// <param name="assignee">Only return tasks assigned to the given user.</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value.</param>
        /// <param name="owner">Only return tasks owned by the given user.</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value.</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored.</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved.</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of.</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group.</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma.</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved.</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id.</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value.</param>
        /// <param name="caseInstanceId">Only return tasks which are part of the case instance with the given id.</param>
        /// <param name="caseInstanceIdWithChildren">Only return tasks which are part of the case instance and its children with the given id.</param>
        /// <param name="caseDefinitionId">Only return tasks which are part of a case instance which has a case definition with the given id.</param>
        /// <param name="createdOn">Only return tasks which are created on the given date.</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date.</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date.</param>
        /// <param name="dueOn">Only return tasks which are due on the given date.</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date.</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date.</param>
        /// <param name="withoutDueDate">Only return tasks which do not have a due date. The property is ignored if the value is false.</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task.</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned.</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result.</param>
        /// <param name="tenantId">Only return tasks with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups).</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).</param>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseTaskResponse> ListTasksAsync(string name, string nameLike, string description, string priority, string minimumPriority, string maximumPriority, string assignee, string assigneeLike, string owner, string ownerLike, string unassigned, string delegationState, string candidateUser, string candidateGroup, string candidateGroups, string involvedUser, string taskDefinitionKey, string taskDefinitionKeyLike, string caseInstanceId, string caseInstanceIdWithChildren, string caseDefinitionId, System.DateTimeOffset? createdOn, System.DateTimeOffset? createdBefore, System.DateTimeOffset? createdAfter, System.DateTimeOffset? dueOn, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, bool? withoutDueDate, bool? excludeSubTasks, bool? active, bool? includeTaskLocalVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, string candidateOrAssigned, string category);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of tasks</summary>
        /// <param name="name">Only return models with the given version.</param>
        /// <param name="nameLike">Only return tasks with a name like the given name.</param>
        /// <param name="description">Only return tasks with the given description.</param>
        /// <param name="priority">Only return tasks with the given priority.</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value.</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value.</param>
        /// <param name="assignee">Only return tasks assigned to the given user.</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value.</param>
        /// <param name="owner">Only return tasks owned by the given user.</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value.</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored.</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved.</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of.</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group.</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma.</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved.</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id.</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value.</param>
        /// <param name="caseInstanceId">Only return tasks which are part of the case instance with the given id.</param>
        /// <param name="caseInstanceIdWithChildren">Only return tasks which are part of the case instance and its children with the given id.</param>
        /// <param name="caseDefinitionId">Only return tasks which are part of a case instance which has a case definition with the given id.</param>
        /// <param name="createdOn">Only return tasks which are created on the given date.</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date.</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date.</param>
        /// <param name="dueOn">Only return tasks which are due on the given date.</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date.</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date.</param>
        /// <param name="withoutDueDate">Only return tasks which do not have a due date. The property is ignored if the value is false.</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task.</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned.</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result.</param>
        /// <param name="tenantId">Only return tasks with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups).</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).</param>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseTaskResponse> ListTasksAsync(string name, string nameLike, string description, string priority, string minimumPriority, string maximumPriority, string assignee, string assigneeLike, string owner, string ownerLike, string unassigned, string delegationState, string candidateUser, string candidateGroup, string candidateGroups, string involvedUser, string taskDefinitionKey, string taskDefinitionKeyLike, string caseInstanceId, string caseInstanceIdWithChildren, string caseDefinitionId, System.DateTimeOffset? createdOn, System.DateTimeOffset? createdBefore, System.DateTimeOffset? createdAfter, System.DateTimeOffset? dueOn, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, bool? withoutDueDate, bool? excludeSubTasks, bool? active, bool? includeTaskLocalVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, string candidateOrAssigned, string category, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create Task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskResponse> CreateTaskAsync(TaskRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskResponse> CreateTaskAsync(TaskRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a task</summary>
        /// <returns>Indicates the task was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskResponse> GetTaskAsync(string taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a task</summary>
        /// <returns>Indicates the task was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskResponse> GetTaskAsync(string taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Tasks actions</summary>
        /// <returns>Indicates the action was executed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecuteTaskActionAsync(string taskId, TaskActionRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Tasks actions</summary>
        /// <returns>Indicates the action was executed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecuteTaskActionAsync(string taskId, TaskActionRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Update a task</summary>
        /// <returns>Indicates the task was updated.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskResponse> UpdateTaskAsync(string taskId, TaskRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a task</summary>
        /// <returns>Indicates the task was updated.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskResponse> UpdateTaskAsync(string taskId, TaskRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a task</summary>
        /// <param name="cascadeHistory">Whether or not to delete the HistoricTask instance when deleting the task (if applicable). If not provided, this value defaults to false.</param>
        /// <param name="deleteReason">Reason why the task is deleted. This value is ignored when cascadeHistory is true.</param>
        /// <returns>Indicates the task was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskAsync(string taskId, string cascadeHistory, string deleteReason);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a task</summary>
        /// <param name="cascadeHistory">Whether or not to delete the HistoricTask instance when deleting the task (if applicable). If not provided, this value defaults to false.</param>
        /// <param name="deleteReason">Reason why the task is deleted. This value is ignored when cascadeHistory is true.</param>
        /// <returns>Indicates the task was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskAsync(string taskId, string cascadeHistory, string deleteReason, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a task form</summary>
        /// <returns>Indicates request was successful and the task form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetTaskForm2Async(string taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a task form</summary>
        /// <returns>Indicates request was successful and the task form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetTaskForm2Async(string taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List identity links for a task</summary>
        /// <returns>Indicates the task was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListTasksInstanceIdentityLinksAsync(string taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List identity links for a task</summary>
        /// <returns>Indicates the task was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListTasksInstanceIdentityLinksAsync(string taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create an identity link on a task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> CreateTaskInstanceIdentityLinksAsync(string taskId, RestIdentityLink body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an identity link on a task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> CreateTaskInstanceIdentityLinksAsync(string taskId, RestIdentityLink body, System.Threading.CancellationToken cancellationToken);

        /// <summary>List identity links for a task for either groups or users</summary>
        /// <returns>Indicates the task was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListIdentityLinksForFamilyAsync(string taskId, string family);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List identity links for a task for either groups or users</summary>
        /// <returns>Indicates the task was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListIdentityLinksForFamilyAsync(string taskId, string family, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a single identity link on a task</summary>
        /// <returns>Indicates the task and identity link was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> GetTaskInstanceIdentityLinksAsync(string taskId, string family, string identityId, string type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single identity link on a task</summary>
        /// <returns>Indicates the task and identity link was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestIdentityLink> GetTaskInstanceIdentityLinksAsync(string taskId, string family, string identityId, string type, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete an identity link on a task</summary>
        /// <returns>Indicates the task and identity link were found and the link has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskInstanceIdentityLinksAsync(string taskId, string family, string identityId, string type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an identity link on a task</summary>
        /// <returns>Indicates the task and identity link were found and the link has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskInstanceIdentityLinksAsync(string taskId, string family, string identityId, string type, System.Threading.CancellationToken cancellationToken);

        /// <summary>List of sub tasks for a task</summary>
        /// <returns>Indicates request was successful and the  sub tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskResponse>> ListTaskSubtasksAsync(string taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of sub tasks for a task</summary>
        /// <returns>Indicates request was successful and the  sub tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskResponse>> ListTaskSubtasksAsync(string taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>List variables for a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestVariable>> ListTaskVariablesAsync(string taskId, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List variables for a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestVariable>> ListTaskVariablesAsync(string taskId, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>Create new variables on a task</summary>
        /// <param name="body">Create a variable on a task</param>
        /// <param name="name">Required name of the variable</param>
        /// <param name="type">Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double)</param>
        /// <param name="scope">Scope of variable that is created. If omitted, local is assumed.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateTaskVariableAsync(string taskId, TaskVariableCollectionResource body, string name, string type, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new variables on a task</summary>
        /// <param name="body">Create a variable on a task</param>
        /// <param name="name">Required name of the variable</param>
        /// <param name="type">Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double)</param>
        /// <param name="scope">Scope of variable that is created. If omitted, local is assumed.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateTaskVariableAsync(string taskId, TaskVariableCollectionResource body, string name, string type, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete all local variables on a task</summary>
        /// <returns>Indicates all local task variables have been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAllLocalTaskVariablesAsync(string taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete all local variables on a task</summary>
        /// <returns>Indicates all local task variables have been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAllLocalTaskVariablesAsync(string taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a variable from a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestVariable> GetTaskInstanceVariableAsync(string taskId, string variableName, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a variable from a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestVariable> GetTaskInstanceVariableAsync(string taskId, string variableName, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>Update an existing variable on a task</summary>
        /// <param name="body">Update a task variable</param>
        /// <param name="name">Required name of the variable</param>
        /// <param name="type">Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double)</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable..</param>
        /// <returns>Indicates the variables was updated and the result is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestVariable> UpdateTaskInstanceVariableAsync(string taskId, string variableName, TaskVariableResource body, string name, string type, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an existing variable on a task</summary>
        /// <param name="body">Update a task variable</param>
        /// <param name="name">Required name of the variable</param>
        /// <param name="type">Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double)</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable..</param>
        /// <returns>Indicates the variables was updated and the result is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestVariable> UpdateTaskInstanceVariableAsync(string taskId, string variableName, TaskVariableResource body, string name, string type, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>Delete a variable on a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task variable was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskInstanceVariableAsync(string taskId, string variableName, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a variable on a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task variable was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskInstanceVariableAsync(string taskId, string variableName, string scope, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get the binary data for a variable</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetTaskVariableDataAsync(string taskId, string variableName, string scope);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a variable</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetTaskVariableDataAsync(string taskId, string variableName, string scope, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Association
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceRef { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseElement SourceElement { get; set; }

        [Newtonsoft.Json.JsonProperty("targetRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetRef { get; set; }

        [Newtonsoft.Json.JsonProperty("targetElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseElement TargetElement { get; set; }

        [Newtonsoft.Json.JsonProperty("transitionEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitionEvent { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Association FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Association>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BaseElement
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static BaseElement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseElement>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Case
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("initiatorVariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitiatorVariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("planModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage PlanModel { get; set; }

        [Newtonsoft.Json.JsonProperty("startEventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartEventType { get; set; }

        [Newtonsoft.Json.JsonProperty("candidateStarterUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CandidateStarterUsers { get; set; }

        [Newtonsoft.Json.JsonProperty("candidateStarterGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CandidateStarterGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("allCaseElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, CaseElement> AllCaseElements { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycleListeners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlowableListener> LifecycleListeners { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Case FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Case>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CaseDefinitionActionRequest
    {
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CaseDefinitionActionRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseDefinitionActionRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CaseDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentId { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentUrl { get; set; }

        /// <summary>Contains the actual deployed CMMN 1.1 xml.</summary>
        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resource { get; set; }

        /// <summary>Contains a graphical representation of the case, null when no diagram is available.</summary>
        [Newtonsoft.Json.JsonProperty("diagramResource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiagramResource { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>Indicates the case definition contains graphical information (CMMN DI).</summary>
        [Newtonsoft.Json.JsonProperty("graphicalNotationDefined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GraphicalNotationDefined { get; set; }

        [Newtonsoft.Json.JsonProperty("startFormDefined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StartFormDefined { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CaseDefinitionResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseDefinitionResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CaseElement
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CaseElement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseElement>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    /// <summary>Only one of caseDefinitionId or caseDefinitionKey can be used in the request body</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CaseInstanceCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("businessKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessKey { get; set; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestVariable> Variables { get; set; }

        [Newtonsoft.Json.JsonProperty("transientVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestVariable> TransientVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("startFormVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestVariable> StartFormVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("outcome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outcome { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("returnVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnVariables { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CaseInstanceCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseInstanceCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CaseInstanceQueryRequest
    {
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseBusinessKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseBusinessKey { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceParentId { get; set; }

        [Newtonsoft.Json.JsonProperty("involvedUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedUser { get; set; }

        [Newtonsoft.Json.JsonProperty("includeCaseVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeCaseVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryVariable> Variables { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantIdLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantIdLike { get; set; }

        [Newtonsoft.Json.JsonProperty("withoutTenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WithoutTenantId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CaseInstanceQueryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseInstanceQueryRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CaseInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("businessKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessKey { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("startUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("ended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ended { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionName { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        [Newtonsoft.Json.JsonProperty("callbackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackId { get; set; }

        [Newtonsoft.Json.JsonProperty("callbackType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackType { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestVariable> Variables { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completed { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CaseInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CaseInstanceVariableCollectionResource
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CaseInstanceVariableCollectionResource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseInstanceVariableCollectionResource>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CaseInstanceVariableResource
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CaseInstanceVariableResource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CaseInstanceVariableResource>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CmmnDeploymentResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeploymentTime { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("parentDeploymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentDeploymentId { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CmmnDeploymentResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CmmnDeploymentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CmmnEngineInfoResponse
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CmmnEngineInfoResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CmmnEngineInfoResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CmmnModel
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("targetNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetNamespace { get; set; }

        [Newtonsoft.Json.JsonProperty("expressionLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpressionLanguage { get; set; }

        [Newtonsoft.Json.JsonProperty("exporter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exporter { get; set; }

        [Newtonsoft.Json.JsonProperty("exporterVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExporterVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("cases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Case> Cases { get; set; }

        [Newtonsoft.Json.JsonProperty("processes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Process> Processes { get; set; }

        [Newtonsoft.Json.JsonProperty("decisions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Decision> Decisions { get; set; }

        [Newtonsoft.Json.JsonProperty("associations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Association> Associations { get; set; }

        [Newtonsoft.Json.JsonProperty("locationMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, GraphicInfo> LocationMap { get; set; }

        [Newtonsoft.Json.JsonProperty("labelLocationMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, GraphicInfo> LabelLocationMap { get; set; }

        [Newtonsoft.Json.JsonProperty("flowLocationMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<GraphicInfo>> FlowLocationMap { get; set; }

        [Newtonsoft.Json.JsonProperty("primaryCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Case PrimaryCase { get; set; }

        [Newtonsoft.Json.JsonProperty("namespaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Namespaces { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CmmnModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CmmnModel>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CompletionNeutralRule
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CompletionNeutralRule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompletionNeutralRule>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Criterion
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("technicalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TechnicalId { get; set; }

        [Newtonsoft.Json.JsonProperty("sentryRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SentryRef { get; set; }

        [Newtonsoft.Json.JsonProperty("sentry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sentry Sentry { get; set; }

        [Newtonsoft.Json.JsonProperty("attachedToRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttachedToRefId { get; set; }

        [Newtonsoft.Json.JsonProperty("exitType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExitType { get; set; }

        [Newtonsoft.Json.JsonProperty("exitEventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExitEventType { get; set; }

        [Newtonsoft.Json.JsonProperty("incomingAssociations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Association> IncomingAssociations { get; set; }

        [Newtonsoft.Json.JsonProperty("outgoingAssociations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Association> OutgoingAssociations { get; set; }

        [Newtonsoft.Json.JsonProperty("entryCriterion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EntryCriterion { get; set; }

        [Newtonsoft.Json.JsonProperty("exitCriterion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExitCriterion { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Criterion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Criterion>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseCaseDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseDefinitionResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseCaseDefinitionResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseCaseDefinitionResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseCaseInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaseInstanceResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseCaseInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseCaseInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseCmmnDeploymentResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CmmnDeploymentResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseCmmnDeploymentResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseCmmnDeploymentResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseHistoricCaseInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistoricCaseInstanceResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseHistoricCaseInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseHistoricCaseInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseHistoricMilestoneInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistoricMilestoneInstanceResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseHistoricMilestoneInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseHistoricMilestoneInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseHistoricPlanItemInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistoricPlanItemInstanceResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseHistoricPlanItemInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseHistoricPlanItemInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseHistoricTaskInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistoricTaskInstanceResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseHistoricTaskInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseHistoricTaskInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseHistoricVariableInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistoricVariableInstanceResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseHistoricVariableInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseHistoricVariableInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseJobResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JobResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseJobResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseJobResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponsePlanItemInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlanItemInstanceResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponsePlanItemInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponsePlanItemInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseTaskResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaskResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DataResponseTaskResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseTaskResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Decision
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("externalRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalRef { get; set; }

        [Newtonsoft.Json.JsonProperty("implementationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImplementationType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Decision FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Decision>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DecisionTableResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }

        [Newtonsoft.Json.JsonProperty("resourceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceName { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DecisionTableResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DecisionTableResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DeploymentResourceResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>For a single resource contains the actual URL to use for retrieving the binary resource</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("contentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentUrl { get; set; }

        /// <summary>Contains the media-type the resource has. This is resolved using a (pluggable) MediaTypeResolver and contains, by default, a limited number of mime-type mappings.</summary>
        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaType { get; set; }

        /// <summary>Type of resource</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeploymentResourceResponseType? Type { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DeploymentResourceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeploymentResourceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DmnDecisionTable
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("resourceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceName { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DmnDecisionTable FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DmnDecisionTable>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExtensionAttribute
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("namespacePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamespacePrefix { get; set; }

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ExtensionAttribute FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtensionAttribute>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExtensionElement
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("namespacePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamespacePrefix { get; set; }

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("elementText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementText { get; set; }

        [Newtonsoft.Json.JsonProperty("childElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ChildElements { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ExtensionElement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtensionElement>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FieldExtension
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        [Newtonsoft.Json.JsonProperty("stringValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StringValue { get; set; }

        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static FieldExtension FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldExtension>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FlowableListener
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceState { get; set; }

        [Newtonsoft.Json.JsonProperty("targetState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetState { get; set; }

        [Newtonsoft.Json.JsonProperty("implementationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImplementationType { get; set; }

        [Newtonsoft.Json.JsonProperty("implementation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Implementation { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldExtension> FieldExtensions { get; set; }

        [Newtonsoft.Json.JsonProperty("onTransaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OnTransaction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static FlowableListener FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlowableListener>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FormDefinition
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("resourceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceName { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static FormDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FormDefinitionResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }

        [Newtonsoft.Json.JsonProperty("resourceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceName { get; set; }

        [Newtonsoft.Json.JsonProperty("deploymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static FormDefinitionResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormDefinitionResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GraphicInfo
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; }

        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }

        [Newtonsoft.Json.JsonProperty("element", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BaseElement Element { get; set; }

        [Newtonsoft.Json.JsonProperty("expanded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Expanded { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static GraphicInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GraphicInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricCaseInstanceQueryRequest
    {
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CaseInstanceIds { get; set; }

        [Newtonsoft.Json.JsonProperty("caseBusinessKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseBusinessKey { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("excludeSubprocesses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeSubprocesses { get; set; }

        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Finished { get; set; }

        [Newtonsoft.Json.JsonProperty("involvedUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedUser { get; set; }

        [Newtonsoft.Json.JsonProperty("finishedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FinishedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("finishedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FinishedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("startedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("startedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("startedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("includeCaseVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeCaseVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryVariable> Variables { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("withoutTenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WithoutTenantId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricCaseInstanceQueryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricCaseInstanceQueryRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricCaseInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("businessKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessKey { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionName { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("startUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("superProcessInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SuperProcessInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestVariable> Variables { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("callbackId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackId { get; set; }

        [Newtonsoft.Json.JsonProperty("callbackType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackType { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricCaseInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricCaseInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricIdentityLinkResponse
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceUrl { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricIdentityLinkResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricIdentityLinkResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricMilestoneInstanceQueryRequest
    {
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("reachedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReachedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("reachedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReachedAfter { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricMilestoneInstanceQueryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricMilestoneInstanceQueryRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricMilestoneInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("elementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementId { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("historicCaseInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HistoricCaseInstanceUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionUrl { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricMilestoneInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricMilestoneInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricPlanItemInstanceQueryRequest
    {
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemInstanceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemInstanceName { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemInstanceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemInstanceState { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("stageInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StageInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("elementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementId { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemDefinitionType { get; set; }

        [Newtonsoft.Json.JsonProperty("createdBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("createdAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("lastAvailableBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAvailableBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("lastAvailableAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAvailableAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("lastEnabledBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastEnabledBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("lastEnabledAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastEnabledAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("lastDisabledBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastDisabledBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("lastDisabledAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastDisabledAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("lastStartedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastStartedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("lastStartedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastStartedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("lastSuspendedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastSuspendedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("lastSuspendedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastSuspendedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("completedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("completedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("terminatedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TerminatedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("terminatedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TerminatedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("occurredBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OccurredBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("occurredAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OccurredAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("exitBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExitBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("exitAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExitAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("endedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("endedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("startUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("withoutTenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WithoutTenantId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricPlanItemInstanceQueryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricPlanItemInstanceQueryRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricPlanItemInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("derivedCaseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DerivedCaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("stageInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StageInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Stage { get; set; }

        [Newtonsoft.Json.JsonProperty("elementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementId { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemDefinitionType { get; set; }

        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastAvailableTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAvailableTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastEnabledTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastEnabledTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastDisabledTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastDisabledTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastStartedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastStartedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastSuspendedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastSuspendedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("completedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("occurredTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OccurredTime { get; set; }

        [Newtonsoft.Json.JsonProperty("terminatedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TerminatedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("exitTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExitTime { get; set; }

        [Newtonsoft.Json.JsonProperty("endedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastUpdatedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdatedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("startUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }

        [Newtonsoft.Json.JsonProperty("entryCriterionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntryCriterionId { get; set; }

        [Newtonsoft.Json.JsonProperty("exitCriterionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExitCriterionId { get; set; }

        [Newtonsoft.Json.JsonProperty("formKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormKey { get; set; }

        [Newtonsoft.Json.JsonProperty("extraValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraValue { get; set; }

        [Newtonsoft.Json.JsonProperty("showInOverview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowInOverview { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("derivedCaseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DerivedCaseDefinitionUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("stageInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StageInstanceUrl { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricPlanItemInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricPlanItemInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricTaskInstanceQueryRequest
    {
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceIdWithChildren", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceIdWithChildren { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskName { get; set; }

        [Newtonsoft.Json.JsonProperty("taskNameLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskNameLike { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDescriptionLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDescriptionLike { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDefinitionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDefinitionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDefinitionKeyLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDefinitionKeyLike { get; set; }

        [Newtonsoft.Json.JsonProperty("taskCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDeleteReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDeleteReason { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDeleteReasonLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDeleteReasonLike { get; set; }

        [Newtonsoft.Json.JsonProperty("taskAssignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskAssignee { get; set; }

        [Newtonsoft.Json.JsonProperty("taskAssigneeLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskAssigneeLike { get; set; }

        [Newtonsoft.Json.JsonProperty("taskOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskOwner { get; set; }

        [Newtonsoft.Json.JsonProperty("taskOwnerLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskOwnerLike { get; set; }

        [Newtonsoft.Json.JsonProperty("taskInvolvedUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskInvolvedUser { get; set; }

        [Newtonsoft.Json.JsonProperty("taskPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaskPriority { get; set; }

        [Newtonsoft.Json.JsonProperty("taskMinPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaskMinPriority { get; set; }

        [Newtonsoft.Json.JsonProperty("taskMaxPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TaskMaxPriority { get; set; }

        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Finished { get; set; }

        [Newtonsoft.Json.JsonProperty("processFinished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProcessFinished { get; set; }

        [Newtonsoft.Json.JsonProperty("parentTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("dueDateAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDateAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("dueDateBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDateBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("withoutDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WithoutDueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("taskCreatedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TaskCreatedOn { get; set; }

        [Newtonsoft.Json.JsonProperty("taskCreatedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TaskCreatedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("taskCreatedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TaskCreatedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("taskCompletedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TaskCompletedOn { get; set; }

        [Newtonsoft.Json.JsonProperty("taskCompletedBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TaskCompletedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("taskCompletedAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TaskCompletedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("includeTaskLocalVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeTaskLocalVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("taskVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryVariable> TaskVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantIdLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantIdLike { get; set; }

        [Newtonsoft.Json.JsonProperty("withoutTenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WithoutTenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("taskCandidateGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskCandidateGroup { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricTaskInstanceQueryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricTaskInstanceQueryRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricTaskInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("deleteReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeleteReason { get; set; }

        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("durationInMillis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DurationInMillis { get; set; }

        [Newtonsoft.Json.JsonProperty("workTimeInMillis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? WorkTimeInMillis { get; set; }

        [Newtonsoft.Json.JsonProperty("claimTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ClaimTime { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDefinitionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDefinitionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("formKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormKey { get; set; }

        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("parentTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestVariable> Variables { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("scopeDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("scopeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeId { get; set; }

        [Newtonsoft.Json.JsonProperty("subScopeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubScopeId { get; set; }

        [Newtonsoft.Json.JsonProperty("scopeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeType { get; set; }

        [Newtonsoft.Json.JsonProperty("propagatedStageInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropagatedStageInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("executionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutionId { get; set; }

        [Newtonsoft.Json.JsonProperty("processInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricTaskInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricTaskInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricVariableInstanceQueryRequest
    {
        [Newtonsoft.Json.JsonProperty("excludeTaskVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeTaskVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("variableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("variableNameLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VariableNameLike { get; set; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryVariable> Variables { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricVariableInstanceQueryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricVariableInstanceQueryRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HistoricVariableInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("variable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RestVariable Variable { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static HistoricVariableInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricVariableInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class JobResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Retries { get; set; }

        [Newtonsoft.Json.JsonProperty("exceptionMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static JobResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JobResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ManualActivationRule
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ManualActivationRule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ManualActivationRule>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ParentCompletionRule
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ParentCompletionRule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParentCompletionRule>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PlanFragment
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemRef { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanItemControl DefaultControl { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycleListeners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlowableListener> LifecycleListeners { get; set; }

        [Newtonsoft.Json.JsonProperty("planItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanItem PlanItem { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, PlanItem> PlanItemMap { get; set; }

        [Newtonsoft.Json.JsonProperty("sentries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sentry> Sentries { get; set; }

        [Newtonsoft.Json.JsonProperty("case", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Case Case { get; set; }

        [Newtonsoft.Json.JsonProperty("planItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlanItem> PlanItems { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static PlanFragment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlanFragment>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PlanItem
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("definitionRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefinitionRef { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanItemDefinition PlanItemDefinition { get; set; }

        [Newtonsoft.Json.JsonProperty("itemControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanItemControl ItemControl { get; set; }

        [Newtonsoft.Json.JsonProperty("criteriaRefs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CriteriaRefs { get; set; }

        [Newtonsoft.Json.JsonProperty("entryCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Criterion> EntryCriteria { get; set; }

        [Newtonsoft.Json.JsonProperty("exitCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Criterion> ExitCriteria { get; set; }

        [Newtonsoft.Json.JsonProperty("incomingAssociations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Association> IncomingAssociations { get; set; }

        [Newtonsoft.Json.JsonProperty("outgoingAssociations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Association> OutgoingAssociations { get; set; }

        [Newtonsoft.Json.JsonProperty("entryDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlanItem> EntryDependencies { get; set; }

        [Newtonsoft.Json.JsonProperty("exitDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlanItem> ExitDependencies { get; set; }

        [Newtonsoft.Json.JsonProperty("entryDependentPlanItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlanItem> EntryDependentPlanItems { get; set; }

        [Newtonsoft.Json.JsonProperty("exitDependentPlanItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlanItem> ExitDependentPlanItems { get; set; }

        [Newtonsoft.Json.JsonProperty("behavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Behavior { get; set; }

        [Newtonsoft.Json.JsonProperty("allDependentPlanItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlanItem> AllDependentPlanItems { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static PlanItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlanItem>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PlanItemControl
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("requiredRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequiredRule RequiredRule { get; set; }

        [Newtonsoft.Json.JsonProperty("repetitionRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepetitionRule RepetitionRule { get; set; }

        [Newtonsoft.Json.JsonProperty("manualActivationRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManualActivationRule ManualActivationRule { get; set; }

        [Newtonsoft.Json.JsonProperty("completionNeutralRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompletionNeutralRule CompletionNeutralRule { get; set; }

        [Newtonsoft.Json.JsonProperty("parentCompletionRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParentCompletionRule ParentCompletionRule { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static PlanItemControl FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlanItemControl>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PlanItemDefinition
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemRef { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanItemControl DefaultControl { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycleListeners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlowableListener> LifecycleListeners { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static PlanItemDefinition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlanItemDefinition>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PlanItemInstanceQueryRequest
    {
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("elementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("stageInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StageInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemDefinitionType { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PlanItemDefinitionTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("createdBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("createdAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("startUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryVariable> Variables { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryVariable> CaseInstanceVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("withoutTenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WithoutTenantId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static PlanItemInstanceQueryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlanItemInstanceQueryRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PlanItemInstanceResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("derivedCaseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DerivedCaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("derivedCaseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DerivedCaseDefinitionUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("stageInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StageInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("stageInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StageInstanceUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemDefinitionType { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Stage { get; set; }

        [Newtonsoft.Json.JsonProperty("elementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementId { get; set; }

        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastAvailableTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAvailableTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastEnabledTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastEnabledTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastDisabledTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastDisabledTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastStartedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastStartedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("lastSuspendedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastSuspendedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("completedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("occurredTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OccurredTime { get; set; }

        [Newtonsoft.Json.JsonProperty("terminatedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TerminatedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("exitTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExitTime { get; set; }

        [Newtonsoft.Json.JsonProperty("endedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("startUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }

        [Newtonsoft.Json.JsonProperty("completable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completable { get; set; }

        [Newtonsoft.Json.JsonProperty("entryCriterionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntryCriterionId { get; set; }

        [Newtonsoft.Json.JsonProperty("exitCriterionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExitCriterionId { get; set; }

        [Newtonsoft.Json.JsonProperty("formKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormKey { get; set; }

        [Newtonsoft.Json.JsonProperty("extraValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraValue { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static PlanItemInstanceResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlanItemInstanceResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Process
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("externalRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalRef { get; set; }

        [Newtonsoft.Json.JsonProperty("implementationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImplementationType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Process FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Process>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class QueryVariable
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QueryVariableOperation? Operation { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static QueryVariable FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryVariable>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RepetitionRule
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        [Newtonsoft.Json.JsonProperty("repetitionCounterVariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepetitionCounterVariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("collectionVariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionVariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("elementVariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementVariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("elementIndexVariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementIndexVariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("maxInstanceCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxInstanceCount { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static RepetitionRule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RepetitionRule>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RequiredRule
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static RequiredRule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequiredRule>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RestActionRequest
    {
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static RestActionRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RestActionRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RestIdentityLink
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static RestIdentityLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RestIdentityLink>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RestVariable
    {
        /// <summary>Name of the variable</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Type of the variable.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>Value of the variable.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        [Newtonsoft.Json.JsonProperty("valueUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static RestVariable FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RestVariable>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Sentry
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("triggerMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TriggerMode { get; set; }

        [Newtonsoft.Json.JsonProperty("onParts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SentryOnPart> OnParts { get; set; }

        [Newtonsoft.Json.JsonProperty("sentryIfPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SentryIfPart SentryIfPart { get; set; }

        [Newtonsoft.Json.JsonProperty("onEventTriggerMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnEventTriggerMode { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultTriggerMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultTriggerMode { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Sentry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sentry>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SentryIfPart
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static SentryIfPart FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SentryIfPart>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SentryOnPart
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceRef { get; set; }

        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanItem Source { get; set; }

        [Newtonsoft.Json.JsonProperty("standardEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StandardEvent { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static SentryOnPart FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SentryOnPart>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Stage
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlRowNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlRowNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("xmlColumnNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XmlColumnNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("extensionElements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionElement>> ExtensionElements { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ExtensionAttribute>> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationTextFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationTextFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanFragment Parent { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlanItemRef { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanItemControl DefaultControl { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycleListeners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FlowableListener> LifecycleListeners { get; set; }

        [Newtonsoft.Json.JsonProperty("planItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanItem PlanItem { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, PlanItem> PlanItemMap { get; set; }

        [Newtonsoft.Json.JsonProperty("sentries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sentry> Sentries { get; set; }

        [Newtonsoft.Json.JsonProperty("exitCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Criterion> ExitCriteria { get; set; }

        [Newtonsoft.Json.JsonProperty("autoComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoComplete { get; set; }

        [Newtonsoft.Json.JsonProperty("autoCompleteCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutoCompleteCondition { get; set; }

        [Newtonsoft.Json.JsonProperty("formKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormKey { get; set; }

        [Newtonsoft.Json.JsonProperty("sameDeployment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SameDeployment { get; set; }

        [Newtonsoft.Json.JsonProperty("validateFormFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidateFormFields { get; set; }

        [Newtonsoft.Json.JsonProperty("displayOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DisplayOrder { get; set; }

        [Newtonsoft.Json.JsonProperty("includeInStageOverview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IncludeInStageOverview { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitionMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, PlanItemDefinition> PlanItemDefinitionMap { get; set; }

        [Newtonsoft.Json.JsonProperty("planItemDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlanItemDefinition> PlanItemDefinitions { get; set; }

        [Newtonsoft.Json.JsonProperty("planModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PlanModel { get; set; }

        [Newtonsoft.Json.JsonProperty("case", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Case Case { get; set; }

        [Newtonsoft.Json.JsonProperty("planItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlanItem> PlanItems { get; set; }

        [Newtonsoft.Json.JsonProperty("parentStage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stage ParentStage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Stage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Stage>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StageResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ended { get; set; }

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("current", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Current { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static StageResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StageResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TaskActionRequest
    {
        /// <summary>Action to perform: Either complete, claim, delegate or resolve</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Action { get; set; }

        /// <summary>If action is claim or delegate, you can use this parameter to set the assignee associated </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }

        /// <summary>Required when completing a task with a form</summary>
        [Newtonsoft.Json.JsonProperty("formDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormDefinitionId { get; set; }

        /// <summary>Optional outcome value when completing a task with a form</summary>
        [Newtonsoft.Json.JsonProperty("outcome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outcome { get; set; }

        /// <summary>If action is complete, you can use this parameter to set variables </summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestVariable> Variables { get; set; }

        /// <summary>If action is complete, you can use this parameter to set transient variables </summary>
        [Newtonsoft.Json.JsonProperty("transientVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestVariable> TransientVariables { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static TaskActionRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskActionRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TaskQueryRequest
    {
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("nameLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NameLike { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptionLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescriptionLike { get; set; }

        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("minimumPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumPriority { get; set; }

        [Newtonsoft.Json.JsonProperty("maximumPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumPriority { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }

        [Newtonsoft.Json.JsonProperty("assigneeLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssigneeLike { get; set; }

        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerLike { get; set; }

        [Newtonsoft.Json.JsonProperty("unassigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Unassigned { get; set; }

        [Newtonsoft.Json.JsonProperty("delegationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DelegationState { get; set; }

        [Newtonsoft.Json.JsonProperty("candidateUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CandidateUser { get; set; }

        [Newtonsoft.Json.JsonProperty("candidateGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CandidateGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("candidateGroupIn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CandidateGroupIn { get; set; }

        [Newtonsoft.Json.JsonProperty("involvedUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvolvedUser { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceIdWithChildren", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceIdWithChildren { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedOn { get; set; }

        [Newtonsoft.Json.JsonProperty("createdBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("createdAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("excludeSubTasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeSubTasks { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDefinitionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDefinitionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDefinitionKeyLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDefinitionKeyLike { get; set; }

        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("dueBefore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueBefore { get; set; }

        [Newtonsoft.Json.JsonProperty("dueAfter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("withoutDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WithoutDueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [Newtonsoft.Json.JsonProperty("includeTaskLocalVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeTaskLocalVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantIdLike", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantIdLike { get; set; }

        [Newtonsoft.Json.JsonProperty("withoutTenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WithoutTenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("candidateOrAssigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CandidateOrAssigned { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("taskVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QueryVariable> TaskVariables { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static TaskQueryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskQueryRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TaskRequest
    {
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }

        [Newtonsoft.Json.JsonProperty("delegationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DelegationState { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("parentTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("formKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ownerSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OwnerSet { get; set; }

        [Newtonsoft.Json.JsonProperty("assigneeSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AssigneeSet { get; set; }

        [Newtonsoft.Json.JsonProperty("delegationStateSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DelegationStateSet { get; set; }

        [Newtonsoft.Json.JsonProperty("nameSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NameSet { get; set; }

        [Newtonsoft.Json.JsonProperty("descriptionSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DescriptionSet { get; set; }

        [Newtonsoft.Json.JsonProperty("duedateSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DuedateSet { get; set; }

        [Newtonsoft.Json.JsonProperty("prioritySet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PrioritySet { get; set; }

        [Newtonsoft.Json.JsonProperty("parentTaskIdSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ParentTaskIdSet { get; set; }

        [Newtonsoft.Json.JsonProperty("categorySet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CategorySet { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantIdSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TenantIdSet { get; set; }

        [Newtonsoft.Json.JsonProperty("formKeySet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FormKeySet { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static TaskRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TaskResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignee { get; set; }

        /// <summary>Delegation-state of the task, can be null, "pending" or "resolved".</summary>
        [Newtonsoft.Json.JsonProperty("delegationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DelegationState { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("suspended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Suspended { get; set; }

        [Newtonsoft.Json.JsonProperty("claimTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimTime { get; set; }

        [Newtonsoft.Json.JsonProperty("taskDefinitionKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDefinitionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("scopeDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("scopeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeId { get; set; }

        [Newtonsoft.Json.JsonProperty("subScopeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubScopeId { get; set; }

        [Newtonsoft.Json.JsonProperty("scopeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeType { get; set; }

        [Newtonsoft.Json.JsonProperty("propagatedStageInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropagatedStageInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        [Newtonsoft.Json.JsonProperty("formKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormKey { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseInstanceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseInstanceUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("caseDefinitionUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseDefinitionUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("parentTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("parentTaskUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentTaskUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("executionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutionId { get; set; }

        [Newtonsoft.Json.JsonProperty("processInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }

        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestVariable> Variables { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static TaskResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TaskVariableCollectionResource
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static TaskVariableCollectionResource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskVariableCollectionResource>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TaskVariableResource
    {
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static TaskVariableResource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskVariableResource>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    /// <summary>Property to sort on, to be used together with the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Sort
    {
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dueDate")]
        DueDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"executionId")]
        ExecutionId = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"processInstanceId")]
        ProcessInstanceId = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"retries")]
        Retries = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"tenantId")]
        TenantId = 5,

    }

    /// <summary>Property to sort on, to be used together with the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Sort2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dueDate")]
        DueDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"executionId")]
        ExecutionId = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"processInstanceId")]
        ProcessInstanceId = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"retries")]
        Retries = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"tenantId")]
        TenantId = 5,

    }

    /// <summary>Property to sort on, to be used together with the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Sort3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dueDate")]
        DueDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"executionId")]
        ExecutionId = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"processInstanceId")]
        ProcessInstanceId = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"retries")]
        Retries = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"tenantId")]
        TenantId = 5,

    }

    /// <summary>Property to sort on, to be used together with the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Sort4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dueDate")]
        DueDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"executionId")]
        ExecutionId = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"processInstanceId")]
        ProcessInstanceId = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"retries")]
        Retries = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"tenantId")]
        TenantId = 5,

    }

    /// <summary>Property to sort on, to be used together with the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Sort5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"key")]
        Key = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"category")]
        Category = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"deploymentId")]
        DeploymentId = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"version")]
        Version = 5,

    }

    /// <summary>Property to sort on, to be used together with the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Sort6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deployTime")]
        DeployTime = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"tenantId")]
        TenantId = 3,

    }

    /// <summary>Property to sort on, to be used together with the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Sort7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"caseDefinitionId")]
        CaseDefinitionId = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tenantId")]
        TenantId = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"caseDefinitionKey")]
        CaseDefinitionKey = 3,

    }

    /// <summary>Property to sort on, to be used together with the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Sort8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"createTime")]
        CreateTime = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"startTime")]
        StartTime = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DeploymentResourceResponseType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"resource")]
        Resource = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"processDefinition")]
        ProcessDefinition = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"processImage")]
        ProcessImage = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum QueryVariableOperation
    {
        [System.Runtime.Serialization.EnumMember(Value = @"equals")]
        Equals = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"notEquals")]
        NotEquals = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"equalsIgnoreCase")]
        EqualsIgnoreCase = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"notEqualsIgnoreCase")]
        NotEqualsIgnoreCase = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"like")]
        Like = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"likeIgnoreCase")]
        LikeIgnoreCase = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"greaterThan")]
        GreaterThan = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"greaterThanOrEquals")]
        GreaterThanOrEquals = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"lessThan")]
        LessThan = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"lessThanOrEquals")]
        LessThanOrEquals = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FlowableHttpClientException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public FlowableHttpClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FlowableHttpClientException<TResult> : FlowableHttpClientException
    {
        public TResult Result { get; private set; }

        public FlowableHttpClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
