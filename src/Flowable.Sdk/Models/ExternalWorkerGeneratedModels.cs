//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Flowable.Sdk.ExternalWorker.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IFlowableExternalWorkerHttpClient
    {
        /// <summary>Acquire External Worker Jobs</summary>
        /// <returns>Indicates the jobs were acquired and locked.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AcquiredExternalWorkerJobResponse>> AcquireAndLockJobsAsync(AcquireExternalWorkerJobRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Acquire External Worker Jobs</summary>
        /// <returns>Indicates the jobs were acquired and locked.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AcquiredExternalWorkerJobResponse>> AcquireAndLockJobsAsync(AcquireExternalWorkerJobRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Complete an External Worker Job with a BPMN Error</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BpmnErrorJobAsync(string jobId, ExternalWorkerJobErrorRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete an External Worker Job with a BPMN Error</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BpmnErrorJobAsync(string jobId, ExternalWorkerJobErrorRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Complete an External Worker Job with a cmmn terminate transition</summary>
        /// <returns>Indicates the job was successfully transitioned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TerminateCmmnJobAsync(string jobId, ExternalWorkerJobTerminateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete an External Worker Job with a cmmn terminate transition</summary>
        /// <returns>Indicates the job was successfully transitioned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TerminateCmmnJobAsync(string jobId, ExternalWorkerJobTerminateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Complete an External Worker Jobs</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompleteJobAsync(string jobId, ExternalWorkerJobCompleteRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete an External Worker Jobs</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompleteJobAsync(string jobId, ExternalWorkerJobCompleteRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fail an External Worker Job</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FailJobAsync(string jobId, ExternalWorkerJobFailureRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fail an External Worker Job</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FailJobAsync(string jobId, ExternalWorkerJobFailureRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>List External Worker Jobs</summary>
        /// <param name="elementId">Only return jobs with the given elementId</param>
        /// <param name="elementName">Only return jobs with the given elementName</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="executionId">Only return jobs with the given executionId</param>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="locked">Only return jobs that are locked</param>
        /// <param name="processDefinitionId">Only return jobs with the given processDefinitionId</param>
        /// <param name="processInstanceId">Only return jobs with the processInstanceId</param>
        /// <param name="scopeDefinitionId">Only return jobs with the given scopeDefinitionId</param>
        /// <param name="scopeId">Only return jobs with the given scopeId</param>
        /// <param name="subScopeId">Only return jobs with the given subScopeId</param>
        /// <param name="tenantId">Only return jobs with the given tenant id</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value</param>
        /// <param name="unlocked">Only return jobs that are unlocked</param>
        /// <param name="withException">Only return jobs with an exception</param>
        /// <param name="withoutTenantId">Only return jobs without a tenantId</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseExternalWorkerJobResponse> ListExternalWorkerJobsAsync(string elementId, string elementName, string exceptionMessage, string executionId, string id, bool? locked, string processDefinitionId, string processInstanceId, string scopeDefinitionId, string scopeId, string subScopeId, string tenantId, string tenantIdLike, bool? unlocked, bool? withException, bool? withoutTenantId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List External Worker Jobs</summary>
        /// <param name="elementId">Only return jobs with the given elementId</param>
        /// <param name="elementName">Only return jobs with the given elementName</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="executionId">Only return jobs with the given executionId</param>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="locked">Only return jobs that are locked</param>
        /// <param name="processDefinitionId">Only return jobs with the given processDefinitionId</param>
        /// <param name="processInstanceId">Only return jobs with the processInstanceId</param>
        /// <param name="scopeDefinitionId">Only return jobs with the given scopeDefinitionId</param>
        /// <param name="scopeId">Only return jobs with the given scopeId</param>
        /// <param name="subScopeId">Only return jobs with the given subScopeId</param>
        /// <param name="tenantId">Only return jobs with the given tenant id</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value</param>
        /// <param name="unlocked">Only return jobs that are unlocked</param>
        /// <param name="withException">Only return jobs with an exception</param>
        /// <param name="withoutTenantId">Only return jobs without a tenantId</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataResponseExternalWorkerJobResponse> ListExternalWorkerJobsAsync(string elementId, string elementName, string exceptionMessage, string executionId, string id, bool? locked, string processDefinitionId, string processInstanceId, string scopeDefinitionId, string scopeId, string subScopeId, string tenantId, string tenantIdLike, bool? unlocked, bool? withException, bool? withoutTenantId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Get a single external worker job</summary>
        /// <returns>Indicates the requested job was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalWorkerJobResponse> GetExternalWorkerJobAsync(string jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single external worker job</summary>
        /// <returns>Indicates the requested job was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalWorkerJobResponse> GetExternalWorkerJobAsync(string jobId, System.Threading.CancellationToken cancellationToken);

    }

    /// <summary>Request that is used for acquiring external worker jobs</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AcquireExternalWorkerJobRequest
    {
        /// <summary>Acquire jobs with the given topic</summary>
        [Newtonsoft.Json.JsonProperty("topic", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Topic { get; set; }

        /// <summary>The acquired jobs will be locked with this lock duration. ISO-8601 duration format PnDTnHnMn.nS with days considered to be exactly 24 hours.</summary>
        [Newtonsoft.Json.JsonProperty("lockDuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LockDuration { get; set; }

        /// <summary>The number of tasks that should be acquired. Default is 1.</summary>
        [Newtonsoft.Json.JsonProperty("numberOfTasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfTasks { get; set; }

        /// <summary>The number of retries if an optimistic lock exception occurs during acquiring. Default is 5</summary>
        [Newtonsoft.Json.JsonProperty("numberOfRetries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfRetries { get; set; }

        /// <summary>The id of the external worker that would be used for locking the job</summary>
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WorkerId { get; set; }

        /// <summary>Only acquire jobs with the given scope type</summary>
        [Newtonsoft.Json.JsonProperty("scopeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AcquireExternalWorkerJobRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AcquireExternalWorkerJobRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AcquiredExternalWorkerJobResponse
    {
        /// <summary>The id of the external job</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>The url of the external job</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>The correlation id of the external job</summary>
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }

        /// <summary>The process instance id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("processInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessInstanceId { get; set; }

        /// <summary>The process definition id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>The execution id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("executionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutionId { get; set; }

        /// <summary>The scope id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("scopeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeId { get; set; }

        /// <summary>The sub scope id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("subScopeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubScopeId { get; set; }

        /// <summary>The scope definition id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("scopeDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeDefinitionId { get; set; }

        /// <summary>The scope type for the external job</summary>
        [Newtonsoft.Json.JsonProperty("scopeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeType { get; set; }

        /// <summary>The id of the element in the model</summary>
        [Newtonsoft.Json.JsonProperty("elementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementId { get; set; }

        /// <summary>The name of the element in the model</summary>
        [Newtonsoft.Json.JsonProperty("elementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementName { get; set; }

        /// <summary>The remaining number of retries</summary>
        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Retries { get; set; }

        /// <summary>The exception message for the job</summary>
        [Newtonsoft.Json.JsonProperty("exceptionMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionMessage { get; set; }

        /// <summary>The due date for the job</summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>The creation time of the job</summary>
        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateTime { get; set; }

        /// <summary>The tenant if of the job</summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        /// <summary>The id of the lock owner. If not set then the job is not locked</summary>
        [Newtonsoft.Json.JsonProperty("lockOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LockOwner { get; set; }

        /// <summary>The time when the lock expires</summary>
        [Newtonsoft.Json.JsonProperty("lockExpirationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LockExpirationTime { get; set; }

        /// <summary>The variables from the scope of the job</summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EngineRestVariable> Variables { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AcquiredExternalWorkerJobResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AcquiredExternalWorkerJobResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DataResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DataResponseExternalWorkerJobResponse
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalWorkerJobResponse> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }

        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DataResponseExternalWorkerJobResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataResponseExternalWorkerJobResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EngineRestVariable
    {
        /// <summary>Name of the variable</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>Type of the variable.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>Value of the variable.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        [Newtonsoft.Json.JsonProperty("valueUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueUrl { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static EngineRestVariable FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EngineRestVariable>(data);
        }

    }

    /// <summary>Request that is used for completing external worker jobs</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExternalWorkerJobCompleteRequest
    {
        /// <summary>The id of the external worker that executes the action. Must match the id of the worker who has most recently locked the job.</summary>
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WorkerId { get; set; }

        /// <summary>The variables that should be passed to the job scope</summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EngineRestVariable> Variables { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExternalWorkerJobCompleteRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalWorkerJobCompleteRequest>(data);
        }

    }

    /// <summary>Request that is used for completing external worker jobs with a bpmn error</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExternalWorkerJobErrorRequest
    {
        /// <summary>The id of the external worker that executes the action. Must match the id of the worker who has most recently locked the job.</summary>
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WorkerId { get; set; }

        /// <summary>The variables that should be passed to the job scope</summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EngineRestVariable> Variables { get; set; }

        /// <summary>The BPMN error code</summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorCode { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExternalWorkerJobErrorRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalWorkerJobErrorRequest>(data);
        }

    }

    /// <summary>Request that is used for failing external worker jobs</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExternalWorkerJobFailureRequest
    {
        /// <summary>The id of the external worker that reports the failure. Must match the id of the worker who has most recently locked the job.</summary>
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WorkerId { get; set; }

        /// <summary>Error message for the failure</summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        /// <summary>Details for the failure</summary>
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorDetails { get; set; }

        /// <summary>The new number of retries. If not set it will be reduced by 1. If 0 the job will be moved ot the dead letter table and would no longer be available for acquiring.</summary>
        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Retries { get; set; }

        /// <summary>The timeout after which the job should be made available again. ISO-8601 duration format PnDTnHnMn.nS with days considered to be exactly 24 hours.</summary>
        [Newtonsoft.Json.JsonProperty("retryTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RetryTimeout { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExternalWorkerJobFailureRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalWorkerJobFailureRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExternalWorkerJobResponse
    {
        /// <summary>The id of the external job</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>The url of the external job</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>The correlation id of the external job</summary>
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }

        /// <summary>The process instance id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("processInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessInstanceId { get; set; }

        /// <summary>The process definition id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }

        /// <summary>The execution id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("executionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutionId { get; set; }

        /// <summary>The scope id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("scopeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeId { get; set; }

        /// <summary>The sub scope id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("subScopeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubScopeId { get; set; }

        /// <summary>The scope definition id for the external job</summary>
        [Newtonsoft.Json.JsonProperty("scopeDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeDefinitionId { get; set; }

        /// <summary>The scope type for the external job</summary>
        [Newtonsoft.Json.JsonProperty("scopeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScopeType { get; set; }

        /// <summary>The id of the element in the model</summary>
        [Newtonsoft.Json.JsonProperty("elementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementId { get; set; }

        /// <summary>The name of the element in the model</summary>
        [Newtonsoft.Json.JsonProperty("elementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ElementName { get; set; }

        /// <summary>The remaining number of retries</summary>
        [Newtonsoft.Json.JsonProperty("retries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Retries { get; set; }

        /// <summary>The exception message for the job</summary>
        [Newtonsoft.Json.JsonProperty("exceptionMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionMessage { get; set; }

        /// <summary>The due date for the job</summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DueDate { get; set; }

        /// <summary>The creation time of the job</summary>
        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreateTime { get; set; }

        /// <summary>The tenant if of the job</summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        /// <summary>The id of the lock owner. If not set then the job is not locked</summary>
        [Newtonsoft.Json.JsonProperty("lockOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LockOwner { get; set; }

        /// <summary>The time when the lock expires</summary>
        [Newtonsoft.Json.JsonProperty("lockExpirationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LockExpirationTime { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExternalWorkerJobResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalWorkerJobResponse>(data);
        }

    }

    /// <summary>Request that is used for terminating external worker jobs</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExternalWorkerJobTerminateRequest
    {
        /// <summary>The id of the external worker that executes the action. Must match the id of the worker who has most recently locked the job.</summary>
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WorkerId { get; set; }

        /// <summary>The variables that should be passed to the job scope</summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EngineRestVariable> Variables { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExternalWorkerJobTerminateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalWorkerJobTerminateRequest>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FlowableHttpClientException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public FlowableHttpClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FlowableHttpClientException<TResult> : FlowableHttpClientException
    {
        public TResult Result { get; private set; }

        public FlowableHttpClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
