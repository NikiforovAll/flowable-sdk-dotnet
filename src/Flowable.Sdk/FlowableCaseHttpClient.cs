//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Flowable.Sdk.Cmmn.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Flowable.Sdk.Cmmn
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FlowableCaseHttpClient : IFlowableCaseHttpClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public FlowableCaseHttpClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);


        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <summary>List of historic case instances</summary>
        /// <param name="caseInstanceId">An id of the historic case instance.</param>
        /// <param name="caseDefinitionKey">The process definition key of the historic case instance.</param>
        /// <param name="caseDefinitionId">The process definition id of the historic case instance.</param>
        /// <param name="businessKey">The business key of the historic case instance.</param>
        /// <param name="involvedUser">An involved user of the historic case instance.</param>
        /// <param name="finished">Indication if the historic case instance is finished.</param>
        /// <param name="finishedAfter">Return only historic case instances that were finished after this date.</param>
        /// <param name="finishedBefore">Return only historic case instances that were finished before this date.</param>
        /// <param name="startedAfter">Return only historic case instances that were started after this date.</param>
        /// <param name="startedBefore">Return only historic case instances that were started before this date.</param>
        /// <param name="startedBy">Return only historic case instances that were started by this user.</param>
        /// <param name="includeCaseVariables">An indication if the historic case instance variables should be returned as well.</param>
        /// <param name="tenantId">Only return instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic case instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricCaseInstanceResponse> ListHistoricCaseInstancesAsync(string caseInstanceId, string caseDefinitionKey, string caseDefinitionId, string businessKey, string involvedUser, bool? finished, System.DateTimeOffset? finishedAfter, System.DateTimeOffset? finishedBefore, System.DateTimeOffset? startedAfter, System.DateTimeOffset? startedBefore, string startedBy, bool? includeCaseVariables, string tenantId, bool? withoutTenantId)
        {
            return ListHistoricCaseInstancesAsync(caseInstanceId, caseDefinitionKey, caseDefinitionId, businessKey, involvedUser, finished, finishedAfter, finishedBefore, startedAfter, startedBefore, startedBy, includeCaseVariables, tenantId, withoutTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of historic case instances</summary>
        /// <param name="caseInstanceId">An id of the historic case instance.</param>
        /// <param name="caseDefinitionKey">The process definition key of the historic case instance.</param>
        /// <param name="caseDefinitionId">The process definition id of the historic case instance.</param>
        /// <param name="businessKey">The business key of the historic case instance.</param>
        /// <param name="involvedUser">An involved user of the historic case instance.</param>
        /// <param name="finished">Indication if the historic case instance is finished.</param>
        /// <param name="finishedAfter">Return only historic case instances that were finished after this date.</param>
        /// <param name="finishedBefore">Return only historic case instances that were finished before this date.</param>
        /// <param name="startedAfter">Return only historic case instances that were started after this date.</param>
        /// <param name="startedBefore">Return only historic case instances that were started before this date.</param>
        /// <param name="startedBy">Return only historic case instances that were started by this user.</param>
        /// <param name="includeCaseVariables">An indication if the historic case instance variables should be returned as well.</param>
        /// <param name="tenantId">Only return instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic case instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricCaseInstanceResponse> ListHistoricCaseInstancesAsync(string caseInstanceId, string caseDefinitionKey, string caseDefinitionId, string businessKey, string involvedUser, bool? finished, System.DateTimeOffset? finishedAfter, System.DateTimeOffset? finishedBefore, System.DateTimeOffset? startedAfter, System.DateTimeOffset? startedBefore, string startedBy, bool? includeCaseVariables, string tenantId, bool? withoutTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-case-instances?");
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (businessKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("businessKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(businessKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (involvedUser != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("involvedUser") + "=").Append(System.Uri.EscapeDataString(ConvertToString(involvedUser, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finished != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finished") + "=").Append(System.Uri.EscapeDataString(ConvertToString(finished, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finishedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finishedAfter") + "=").Append(System.Uri.EscapeDataString(finishedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finishedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finishedBefore") + "=").Append(System.Uri.EscapeDataString(finishedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startedAfter") + "=").Append(System.Uri.EscapeDataString(startedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startedBefore") + "=").Append(System.Uri.EscapeDataString(startedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startedBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCaseVariables != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCaseVariables") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCaseVariables, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricCaseInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a historic case instance</summary>
        /// <returns>Indicates that the historic process instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoricCaseInstanceResponse> GetHistoricCaseInstanceAsync(string caseInstanceId)
        {
            return GetHistoricCaseInstanceAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a historic case instance</summary>
        /// <returns>Indicates that the historic process instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HistoricCaseInstanceResponse> GetHistoricCaseInstanceAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-case-instances/{caseInstanceId}");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoricCaseInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates that the historic process instances could not be found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a historic case instance</summary>
        /// <returns>Indicates that the historic process instance was deleted.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteHistoricCaseInstanceAsync(string caseInstanceId)
        {
            return DeleteHistoricCaseInstanceAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a historic case instance</summary>
        /// <returns>Indicates that the historic process instance was deleted.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteHistoricCaseInstanceAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-case-instances/{caseInstanceId}");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates that the historic process instance could not be found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List identity links of a historic case instance</summary>
        /// <returns>Indicates request was successful and the identity links are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>> ListHistoricCaseInstanceIdentityLinksAsync(string caseInstanceId)
        {
            return ListHistoricCaseInstanceIdentityLinksAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List identity links of a historic case instance</summary>
        /// <returns>Indicates request was successful and the identity links are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>> ListHistoricCaseInstanceIdentityLinksAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-case-instances/{caseInstanceId}/identitylinks");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the process instance could not be found..", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StageResponse>> GetStageOverviewAllAsync(string caseInstanceId)
        {
            return GetStageOverviewAllAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StageResponse>> GetStageOverviewAllAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-case-instances/{caseInstanceId}/stage-overview");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StageResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get the binary data for a historic case instance variable</summary>
        /// <returns>Indicates the case instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricCaseInstanceVariableDataAsync(string caseInstanceId, string variableName)
        {
            return GetHistoricCaseInstanceVariableDataAsync(caseInstanceId, variableName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a historic case instance variable</summary>
        /// <returns>Indicates the case instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricCaseInstanceVariableDataAsync(string caseInstanceId, string variableName, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-case-instances/{caseInstanceId}/variables/{variableName}/data");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<byte[]>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found or the process instance does not have a variable with the given name or the variable does not have a binary stream available. Status message provides additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List of historic milestone instances</summary>
        /// <param name="milestoneId">An id of the historic milestone instance.</param>
        /// <param name="milestoneName">The name of the historic milestone instance</param>
        /// <param name="caseInstanceId">The id of the case instance containing the milestone.</param>
        /// <param name="caseDefinitionId">The id of the definition of the case where the milestone is defined.</param>
        /// <param name="reachedBefore">Return only historic milestone instances that were reached before this date.</param>
        /// <param name="reachedAfter">Return only historic milestone instances that were reached after this date.</param>
        /// <returns>Indicates that historic milestone instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricMilestoneInstanceResponse> ListHistoricMilestoneInstancesAsync(string milestoneId, string milestoneName, string caseInstanceId, string caseDefinitionId, string reachedBefore, string reachedAfter)
        {
            return ListHistoricMilestoneInstancesAsync(milestoneId, milestoneName, caseInstanceId, caseDefinitionId, reachedBefore, reachedAfter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of historic milestone instances</summary>
        /// <param name="milestoneId">An id of the historic milestone instance.</param>
        /// <param name="milestoneName">The name of the historic milestone instance</param>
        /// <param name="caseInstanceId">The id of the case instance containing the milestone.</param>
        /// <param name="caseDefinitionId">The id of the definition of the case where the milestone is defined.</param>
        /// <param name="reachedBefore">Return only historic milestone instances that were reached before this date.</param>
        /// <param name="reachedAfter">Return only historic milestone instances that were reached after this date.</param>
        /// <returns>Indicates that historic milestone instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricMilestoneInstanceResponse> ListHistoricMilestoneInstancesAsync(string milestoneId, string milestoneName, string caseInstanceId, string caseDefinitionId, string reachedBefore, string reachedAfter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-milestone-instances?");
            if (milestoneId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("milestoneId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(milestoneId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (milestoneName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("milestoneName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(milestoneName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reachedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reachedBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reachedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reachedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reachedAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reachedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricMilestoneInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a historic milestone instance by id</summary>
        /// <returns>Indicates that the historic milestone instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoricMilestoneInstanceResponse> GetHistoricMilestoneInstanceByIdAsync(string milestoneInstanceId)
        {
            return GetHistoricMilestoneInstanceByIdAsync(milestoneInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a historic milestone instance by id</summary>
        /// <returns>Indicates that the historic milestone instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HistoricMilestoneInstanceResponse> GetHistoricMilestoneInstanceByIdAsync(string milestoneInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (milestoneInstanceId == null)
                throw new System.ArgumentNullException("milestoneInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-milestone-instances/{milestoneInstanceId}");
            urlBuilder_.Replace("{milestoneInstanceId}", System.Uri.EscapeDataString(ConvertToString(milestoneInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoricMilestoneInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates that the historic milestone instances could not be found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List of historic plan item instances</summary>
        /// <param name="planItemInstanceId">The id of the historic planItem instance.</param>
        /// <param name="planItemInstanceName">The name of the historic planItem instance.</param>
        /// <param name="planItemInstanceState">The state of the historic planItem instance.</param>
        /// <param name="caseDefinitionId">The id of the definition of the case were the historic planItem instance is defined.</param>
        /// <param name="caseInstanceId">The id of the case instance were the historic planItem instance existed.</param>
        /// <param name="stageInstanceId">The id of the stage were the historic planItem instance was contained.</param>
        /// <param name="elementId">The id of the planItem model of the historic planItem instance.</param>
        /// <param name="planItemDefinitionId">The id of the planItem model definition of the historic planItem instance.</param>
        /// <param name="planItemDefinitionType">The type of planItem of the historic planItem instance.</param>
        /// <param name="createdBefore">Return only historic planItem instances that were created before this date.</param>
        /// <param name="createdAfter">Return only historic planItem instances that were created after this date.</param>
        /// <param name="lastAvailableBefore">Return only historic planItem instances that were last in available before this date.</param>
        /// <param name="lastAvailableAfter">Return only historic planItem instances that were last in available state after this date.</param>
        /// <param name="lastEnabledBefore">Return only historic planItem instances that were last in enabled state before this date.</param>
        /// <param name="lastEnabledAfter">Return only historic planItem instances that were last in enabled state after this date.</param>
        /// <param name="lastDisabledBefore">Return only historic planItem instances that were last in disable state before this date.</param>
        /// <param name="lastDisabledAfter">Return only historic planItem instances that were last in disabled state after this date.</param>
        /// <param name="lastStartedBefore">Return only historic planItem instances that were last in active state before this date.</param>
        /// <param name="lastStartedAfter">Return only historic planItem instances that were last in active state after this date.</param>
        /// <param name="lastSuspendedBefore">Return only historic planItem instances that were last in suspended state before this date.</param>
        /// <param name="lastSuspendedAfter">Return only historic planItem instances that were last in suspended state after this date.</param>
        /// <param name="completedBefore">Return only historic planItem instances that were completed before this date.</param>
        /// <param name="completedAfter">Return only historic planItem instances that were completed after this date.</param>
        /// <param name="terminatedBefore">Return only historic planItem instances that were terminated before this date.</param>
        /// <param name="terminatedAfter">Return only historic planItem instances that were terminated after this date.</param>
        /// <param name="occurredBefore">Return only historic planItem instances that occurred before this date.</param>
        /// <param name="occurredAfter">Return only historic planItem instances that occurred after after this date.</param>
        /// <param name="exitBefore">Return only historic planItem instances that exit before this date.</param>
        /// <param name="exitAfter">Return only historic planItem instances that exit after this date.</param>
        /// <param name="endedBefore">Return only historic planItem instances that ended before this date.</param>
        /// <param name="endedAfter">Return only historic planItem instances that ended after this date.</param>
        /// <param name="startUserId">Return only historic planItem instances that were started by this user.</param>
        /// <param name="referenceId">The id of process that was referenced by this historic planItem instance.</param>
        /// <param name="referenceType">The type of reference to the process referenced by this historic planItem instance.</param>
        /// <param name="tenantId">Only return instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic planItem instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricPlanItemInstanceResponse> ListHistoricPlanItemInstancesAsync(string planItemInstanceId, string planItemInstanceName, string planItemInstanceState, string caseDefinitionId, string caseInstanceId, string stageInstanceId, string elementId, string planItemDefinitionId, string planItemDefinitionType, object createdBefore, object createdAfter, object lastAvailableBefore, object lastAvailableAfter, object lastEnabledBefore, object lastEnabledAfter, object lastDisabledBefore, object lastDisabledAfter, object lastStartedBefore, object lastStartedAfter, object lastSuspendedBefore, object lastSuspendedAfter, object completedBefore, object completedAfter, object terminatedBefore, object terminatedAfter, object occurredBefore, object occurredAfter, object exitBefore, object exitAfter, object endedBefore, object endedAfter, System.DateTimeOffset? startUserId, string referenceId, string referenceType, string tenantId, bool? withoutTenantId)
        {
            return ListHistoricPlanItemInstancesAsync(planItemInstanceId, planItemInstanceName, planItemInstanceState, caseDefinitionId, caseInstanceId, stageInstanceId, elementId, planItemDefinitionId, planItemDefinitionType, createdBefore, createdAfter, lastAvailableBefore, lastAvailableAfter, lastEnabledBefore, lastEnabledAfter, lastDisabledBefore, lastDisabledAfter, lastStartedBefore, lastStartedAfter, lastSuspendedBefore, lastSuspendedAfter, completedBefore, completedAfter, terminatedBefore, terminatedAfter, occurredBefore, occurredAfter, exitBefore, exitAfter, endedBefore, endedAfter, startUserId, referenceId, referenceType, tenantId, withoutTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of historic plan item instances</summary>
        /// <param name="planItemInstanceId">The id of the historic planItem instance.</param>
        /// <param name="planItemInstanceName">The name of the historic planItem instance.</param>
        /// <param name="planItemInstanceState">The state of the historic planItem instance.</param>
        /// <param name="caseDefinitionId">The id of the definition of the case were the historic planItem instance is defined.</param>
        /// <param name="caseInstanceId">The id of the case instance were the historic planItem instance existed.</param>
        /// <param name="stageInstanceId">The id of the stage were the historic planItem instance was contained.</param>
        /// <param name="elementId">The id of the planItem model of the historic planItem instance.</param>
        /// <param name="planItemDefinitionId">The id of the planItem model definition of the historic planItem instance.</param>
        /// <param name="planItemDefinitionType">The type of planItem of the historic planItem instance.</param>
        /// <param name="createdBefore">Return only historic planItem instances that were created before this date.</param>
        /// <param name="createdAfter">Return only historic planItem instances that were created after this date.</param>
        /// <param name="lastAvailableBefore">Return only historic planItem instances that were last in available before this date.</param>
        /// <param name="lastAvailableAfter">Return only historic planItem instances that were last in available state after this date.</param>
        /// <param name="lastEnabledBefore">Return only historic planItem instances that were last in enabled state before this date.</param>
        /// <param name="lastEnabledAfter">Return only historic planItem instances that were last in enabled state after this date.</param>
        /// <param name="lastDisabledBefore">Return only historic planItem instances that were last in disable state before this date.</param>
        /// <param name="lastDisabledAfter">Return only historic planItem instances that were last in disabled state after this date.</param>
        /// <param name="lastStartedBefore">Return only historic planItem instances that were last in active state before this date.</param>
        /// <param name="lastStartedAfter">Return only historic planItem instances that were last in active state after this date.</param>
        /// <param name="lastSuspendedBefore">Return only historic planItem instances that were last in suspended state before this date.</param>
        /// <param name="lastSuspendedAfter">Return only historic planItem instances that were last in suspended state after this date.</param>
        /// <param name="completedBefore">Return only historic planItem instances that were completed before this date.</param>
        /// <param name="completedAfter">Return only historic planItem instances that were completed after this date.</param>
        /// <param name="terminatedBefore">Return only historic planItem instances that were terminated before this date.</param>
        /// <param name="terminatedAfter">Return only historic planItem instances that were terminated after this date.</param>
        /// <param name="occurredBefore">Return only historic planItem instances that occurred before this date.</param>
        /// <param name="occurredAfter">Return only historic planItem instances that occurred after after this date.</param>
        /// <param name="exitBefore">Return only historic planItem instances that exit before this date.</param>
        /// <param name="exitAfter">Return only historic planItem instances that exit after this date.</param>
        /// <param name="endedBefore">Return only historic planItem instances that ended before this date.</param>
        /// <param name="endedAfter">Return only historic planItem instances that ended after this date.</param>
        /// <param name="startUserId">Return only historic planItem instances that were started by this user.</param>
        /// <param name="referenceId">The id of process that was referenced by this historic planItem instance.</param>
        /// <param name="referenceType">The type of reference to the process referenced by this historic planItem instance.</param>
        /// <param name="tenantId">Only return instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic planItem instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricPlanItemInstanceResponse> ListHistoricPlanItemInstancesAsync(string planItemInstanceId, string planItemInstanceName, string planItemInstanceState, string caseDefinitionId, string caseInstanceId, string stageInstanceId, string elementId, string planItemDefinitionId, string planItemDefinitionType, object createdBefore, object createdAfter, object lastAvailableBefore, object lastAvailableAfter, object lastEnabledBefore, object lastEnabledAfter, object lastDisabledBefore, object lastDisabledAfter, object lastStartedBefore, object lastStartedAfter, object lastSuspendedBefore, object lastSuspendedAfter, object completedBefore, object completedAfter, object terminatedBefore, object terminatedAfter, object occurredBefore, object occurredAfter, object exitBefore, object exitAfter, object endedBefore, object endedAfter, System.DateTimeOffset? startUserId, string referenceId, string referenceType, string tenantId, bool? withoutTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-planitem-instances?");
            if (planItemInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemInstanceName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemInstanceName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemInstanceName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemInstanceState != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemInstanceState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemInstanceState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stageInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stageInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stageInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (elementId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("elementId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemDefinitionType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemDefinitionType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemDefinitionType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastAvailableBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastAvailableBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastAvailableBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastAvailableAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastAvailableAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastAvailableAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastEnabledBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastEnabledBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastEnabledBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastEnabledAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastEnabledAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastEnabledAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastDisabledBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastDisabledBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastDisabledBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastDisabledAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastDisabledAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastDisabledAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastStartedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastStartedBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastStartedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastStartedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastStartedAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastStartedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastSuspendedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastSuspendedBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastSuspendedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastSuspendedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastSuspendedAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastSuspendedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (completedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("completedBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(completedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (completedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("completedAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(completedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (terminatedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("terminatedBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(terminatedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (terminatedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("terminatedAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(terminatedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (occurredBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("occurredBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(occurredBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (occurredAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("occurredAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(occurredAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exitBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exitBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exitBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exitAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exitAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exitAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endedBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endedBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("endedAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endedAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startUserId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startUserId") + "=").Append(System.Uri.EscapeDataString(startUserId.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (referenceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("referenceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(referenceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (referenceType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("referenceType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(referenceType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricPlanItemInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a historic plan item instance</summary>
        /// <returns>Indicates that the historic plan item instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoricPlanItemInstanceResponse> GetHistoricPlanItemInstanceAsync(string planItemInstanceId)
        {
            return GetHistoricPlanItemInstanceAsync(planItemInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a historic plan item instance</summary>
        /// <returns>Indicates that the historic plan item instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HistoricPlanItemInstanceResponse> GetHistoricPlanItemInstanceAsync(string planItemInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (planItemInstanceId == null)
                throw new System.ArgumentNullException("planItemInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-planitem-instances/{planItemInstanceId}");
            urlBuilder_.Replace("{planItemInstanceId}", System.Uri.EscapeDataString(ConvertToString(planItemInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoricPlanItemInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates that the historic plan item instances could not be found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List historic task instances</summary>
        /// <param name="taskId">An id of the historic task instance.</param>
        /// <param name="caseInstanceId">The case instance id of the historic task instance.</param>
        /// <param name="caseInstanceIdWithChildren">Selects the historic task instance of a case instance and its children.</param>
        /// <param name="caseDefinitionId">The case definition id of the historic task instance.</param>
        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process</param>
        /// <param name="taskName">The task name of the historic task instance.</param>
        /// <param name="taskNameLike">The task name with like operator for the historic task instance.</param>
        /// <param name="taskDescription">The task description of the historic task instance.</param>
        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance.</param>
        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).</param>
        /// <param name="taskDeleteReason">The task delete reason of the historic task instance.</param>
        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance.</param>
        /// <param name="taskAssignee">The assignee of the historic task instance.</param>
        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance.</param>
        /// <param name="taskOwner">The owner of the historic task instance.</param>
        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance.</param>
        /// <param name="taskInvolvedUser">An involved user of the historic task instance</param>
        /// <param name="taskPriority">The priority of the historic task instance.</param>
        /// <param name="finished">Indication if the historic task instance is finished.</param>
        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished.</param>
        /// <param name="parentTaskId">An optional parent task id of the historic task instance.</param>
        /// <param name="dueDate">Return only historic task instances that have a due date equal this date.</param>
        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date.</param>
        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date.</param>
        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored.</param>
        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date.</param>
        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date.</param>
        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date.</param>
        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date.</param>
        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date.</param>
        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date.</param>
        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well.</param>
        /// <param name="tenantId">Only return historic task instances with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic task instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricTaskInstanceResponse> ListHistoricTaskInstancesAsync(string taskId, string caseInstanceId, string caseInstanceIdWithChildren, string caseDefinitionId, string taskDefinitionKey, string taskName, string taskNameLike, string taskDescription, string taskDescriptionLike, string taskCategory, string taskDeleteReason, string taskDeleteReasonLike, string taskAssignee, string taskAssigneeLike, string taskOwner, string taskOwnerLike, string taskInvolvedUser, string taskPriority, bool? finished, bool? processFinished, string parentTaskId, System.DateTimeOffset? dueDate, System.DateTimeOffset? dueDateAfter, System.DateTimeOffset? dueDateBefore, bool? withoutDueDate, System.DateTimeOffset? taskCompletedOn, System.DateTimeOffset? taskCompletedAfter, System.DateTimeOffset? taskCompletedBefore, System.DateTimeOffset? taskCreatedOn, System.DateTimeOffset? taskCreatedBefore, System.DateTimeOffset? taskCreatedAfter, bool? includeTaskLocalVariables, string tenantId, string tenantIdLike, bool? withoutTenantId)
        {
            return ListHistoricTaskInstancesAsync(taskId, caseInstanceId, caseInstanceIdWithChildren, caseDefinitionId, taskDefinitionKey, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskCategory, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskInvolvedUser, taskPriority, finished, processFinished, parentTaskId, dueDate, dueDateAfter, dueDateBefore, withoutDueDate, taskCompletedOn, taskCompletedAfter, taskCompletedBefore, taskCreatedOn, taskCreatedBefore, taskCreatedAfter, includeTaskLocalVariables, tenantId, tenantIdLike, withoutTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List historic task instances</summary>
        /// <param name="taskId">An id of the historic task instance.</param>
        /// <param name="caseInstanceId">The case instance id of the historic task instance.</param>
        /// <param name="caseInstanceIdWithChildren">Selects the historic task instance of a case instance and its children.</param>
        /// <param name="caseDefinitionId">The case definition id of the historic task instance.</param>
        /// <param name="taskDefinitionKey">The task definition key for tasks part of a process</param>
        /// <param name="taskName">The task name of the historic task instance.</param>
        /// <param name="taskNameLike">The task name with like operator for the historic task instance.</param>
        /// <param name="taskDescription">The task description of the historic task instance.</param>
        /// <param name="taskDescriptionLike">The task description with like operator for the historic task instance.</param>
        /// <param name="taskCategory">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).</param>
        /// <param name="taskDeleteReason">The task delete reason of the historic task instance.</param>
        /// <param name="taskDeleteReasonLike">The task delete reason with like operator for the historic task instance.</param>
        /// <param name="taskAssignee">The assignee of the historic task instance.</param>
        /// <param name="taskAssigneeLike">The assignee with like operator for the historic task instance.</param>
        /// <param name="taskOwner">The owner of the historic task instance.</param>
        /// <param name="taskOwnerLike">The owner with like operator for the historic task instance.</param>
        /// <param name="taskInvolvedUser">An involved user of the historic task instance</param>
        /// <param name="taskPriority">The priority of the historic task instance.</param>
        /// <param name="finished">Indication if the historic task instance is finished.</param>
        /// <param name="processFinished">Indication if the process instance of the historic task instance is finished.</param>
        /// <param name="parentTaskId">An optional parent task id of the historic task instance.</param>
        /// <param name="dueDate">Return only historic task instances that have a due date equal this date.</param>
        /// <param name="dueDateAfter">Return only historic task instances that have a due date after this date.</param>
        /// <param name="dueDateBefore">Return only historic task instances that have a due date before this date.</param>
        /// <param name="withoutDueDate">Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored.</param>
        /// <param name="taskCompletedOn">Return only historic task instances that have been completed on this date.</param>
        /// <param name="taskCompletedAfter">Return only historic task instances that have been completed after this date.</param>
        /// <param name="taskCompletedBefore">Return only historic task instances that have been completed before this date.</param>
        /// <param name="taskCreatedOn">Return only historic task instances that were created on this date.</param>
        /// <param name="taskCreatedBefore">Return only historic task instances that were created before this date.</param>
        /// <param name="taskCreatedAfter">Return only historic task instances that were created after this date.</param>
        /// <param name="includeTaskLocalVariables">An indication if the historic task instance local variables should be returned as well.</param>
        /// <param name="tenantId">Only return historic task instances with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return historic task instances with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <returns>Indicates that historic task instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricTaskInstanceResponse> ListHistoricTaskInstancesAsync(string taskId, string caseInstanceId, string caseInstanceIdWithChildren, string caseDefinitionId, string taskDefinitionKey, string taskName, string taskNameLike, string taskDescription, string taskDescriptionLike, string taskCategory, string taskDeleteReason, string taskDeleteReasonLike, string taskAssignee, string taskAssigneeLike, string taskOwner, string taskOwnerLike, string taskInvolvedUser, string taskPriority, bool? finished, bool? processFinished, string parentTaskId, System.DateTimeOffset? dueDate, System.DateTimeOffset? dueDateAfter, System.DateTimeOffset? dueDateBefore, bool? withoutDueDate, System.DateTimeOffset? taskCompletedOn, System.DateTimeOffset? taskCompletedAfter, System.DateTimeOffset? taskCompletedBefore, System.DateTimeOffset? taskCreatedOn, System.DateTimeOffset? taskCreatedBefore, System.DateTimeOffset? taskCreatedAfter, bool? includeTaskLocalVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-task-instances?");
            if (taskId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceIdWithChildren != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceIdWithChildren") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceIdWithChildren, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskDefinitionKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskDefinitionKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskDefinitionKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskNameLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskNameLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskNameLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskDescription != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskDescription") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskDescription, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskDescriptionLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskDescriptionLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskDescriptionLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskCategory != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskCategory") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskCategory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskDeleteReason != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskDeleteReason") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskDeleteReason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskDeleteReasonLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskDeleteReasonLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskDeleteReasonLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskAssignee != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskAssignee") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskAssignee, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskAssigneeLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskAssigneeLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskAssigneeLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskOwner != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskOwner") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskOwner, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskOwnerLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskOwnerLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskOwnerLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskInvolvedUser != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskInvolvedUser") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskInvolvedUser, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskPriority != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskPriority") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskPriority, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finished != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finished") + "=").Append(System.Uri.EscapeDataString(ConvertToString(finished, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processFinished != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processFinished") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processFinished, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (parentTaskId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("parentTaskId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(parentTaskId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueDate") + "=").Append(System.Uri.EscapeDataString(dueDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueDateAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueDateAfter") + "=").Append(System.Uri.EscapeDataString(dueDateAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueDateBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueDateBefore") + "=").Append(System.Uri.EscapeDataString(dueDateBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutDueDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutDueDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutDueDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskCompletedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskCompletedOn") + "=").Append(System.Uri.EscapeDataString(taskCompletedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskCompletedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskCompletedAfter") + "=").Append(System.Uri.EscapeDataString(taskCompletedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskCompletedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskCompletedBefore") + "=").Append(System.Uri.EscapeDataString(taskCompletedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskCreatedOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskCreatedOn") + "=").Append(System.Uri.EscapeDataString(taskCreatedOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskCreatedBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskCreatedBefore") + "=").Append(System.Uri.EscapeDataString(taskCreatedBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskCreatedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskCreatedAfter") + "=").Append(System.Uri.EscapeDataString(taskCreatedAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeTaskLocalVariables != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeTaskLocalVariables") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeTaskLocalVariables, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricTaskInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a single historic task instance</summary>
        /// <returns>Indicates that the historic task instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoricTaskInstanceResponse> GetTaskInstanceAsync(string taskId)
        {
            return GetTaskInstanceAsync(taskId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single historic task instance</summary>
        /// <returns>Indicates that the historic task instances could be found.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HistoricTaskInstanceResponse> GetTaskInstanceAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-task-instances/{taskId}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HistoricTaskInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates that the historic task instances could not be found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a historic task instance</summary>
        /// <returns>Indicates that the historic task instance was deleted.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteTaskInstanceAsync(string taskId)
        {
            return DeleteTaskInstanceAsync(taskId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a historic task instance</summary>
        /// <returns>Indicates that the historic task instance was deleted.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteTaskInstanceAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-task-instances/{taskId}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates that the historic task instance could not be found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a historic task instance form</summary>
        /// <returns>Indicates request was successful and the task form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetTaskFormAsync(string taskId)
        {
            return GetTaskFormAsync(taskId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a historic task instance form</summary>
        /// <returns>Indicates request was successful and the task form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetTaskFormAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-task-instances/{taskId}/form");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List identity links of a historic task instance</summary>
        /// <returns>Indicates request was successful and the identity links are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>> ListHistoricTaskInstanceIdentityLinksAsync(string taskId)
        {
            return ListHistoricTaskInstanceIdentityLinksAsync(taskId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List identity links of a historic task instance</summary>
        /// <returns>Indicates request was successful and the identity links are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>> ListHistoricTaskInstanceIdentityLinksAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-task-instances/{taskId}/identitylinks");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HistoricIdentityLinkResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the task instance could not be found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get the binary data for a historic task instance variable</summary>
        /// <returns>Indicates the task instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricTaskInstanceVariableDataAsync(string taskId, string variableName, string scope)
        {
            return GetHistoricTaskInstanceVariableDataAsync(taskId, variableName, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a historic task instance variable</summary>
        /// <returns>Indicates the task instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricTaskInstanceVariableDataAsync(string taskId, string variableName, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-task-instances/{taskId}/variables/{variableName}/data?");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));
            if (scope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<byte[]>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task instance was not found or the process instance does not have a variable with the given name or the variable does not  have a binary stream available. Status message provides additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List of historic variable instances</summary>
        /// <param name="caseInstanceId">The case instance id of the historic variable instance.</param>
        /// <param name="taskId">The task id of the historic variable instance.</param>
        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result.</param>
        /// <param name="variableName">The variable name of the historic variable instance.</param>
        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance.</param>
        /// <returns>Indicates that historic variable instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricVariableInstanceResponse> ListHistoricVariableInstancesAsync(string caseInstanceId, string taskId, bool? excludeTaskVariables, string variableName, string variableNameLike)
        {
            return ListHistoricVariableInstancesAsync(caseInstanceId, taskId, excludeTaskVariables, variableName, variableNameLike, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of historic variable instances</summary>
        /// <param name="caseInstanceId">The case instance id of the historic variable instance.</param>
        /// <param name="taskId">The task id of the historic variable instance.</param>
        /// <param name="excludeTaskVariables">Indication to exclude the task variables from the result.</param>
        /// <param name="variableName">The variable name of the historic variable instance.</param>
        /// <param name="variableNameLike">The variable name using the like operator for the historic variable instance.</param>
        /// <returns>Indicates that historic variable instances could be queried.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricVariableInstanceResponse> ListHistoricVariableInstancesAsync(string caseInstanceId, string taskId, bool? excludeTaskVariables, string variableName, string variableNameLike, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-variable-instances?");
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeTaskVariables != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeTaskVariables") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeTaskVariables, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (variableName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("variableName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (variableNameLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("variableNameLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(variableNameLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricVariableInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get the binary data for a historic task instance variable</summary>
        /// <returns>Indicates the variable instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricInstanceVariableDataAsync(string varInstanceId)
        {
            return GetHistoricInstanceVariableDataAsync(varInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a historic task instance variable</summary>
        /// <returns>Indicates the variable instance was found and the requested variable data is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetHistoricInstanceVariableDataAsync(string varInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (varInstanceId == null)
                throw new System.ArgumentNullException("varInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-history/historic-variable-instances/{varInstanceId}/data");
            urlBuilder_.Replace("{varInstanceId}", System.Uri.EscapeDataString(ConvertToString(varInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<byte[]>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested variable instance was not found or the variable instance does not have a variable with the given name or the variable does not have a binary stream available. Status message provides additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List deadletter jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseJobResponse> ListDeadLetterJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort? sort)
        {
            return ListDeadLetterJobsAsync(id, caseInstanceId, planItemInstanceId, caseDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List deadletter jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseJobResponse> ListDeadLetterJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort? sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/deadletter-jobs?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (messagesOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("messagesOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(messagesOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withException != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withException") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withException, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueBefore") + "=").Append(System.Uri.EscapeDataString(dueBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueAfter") + "=").Append(System.Uri.EscapeDataString(dueAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exceptionMessage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exceptionMessage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exceptionMessage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (locked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unlocked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unlocked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unlocked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseJobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an illegal value has been used in a url query parameter or the both \'messagesOnly\' and \'timersOnly\' are used as parameters. Status description contains additional details about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a single deadletter job</summary>
        /// <returns>Indicates the suspended job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobResponse> GetDeadletterJobAsync(string jobId)
        {
            return GetDeadletterJobAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single deadletter job</summary>
        /// <returns>Indicates the suspended job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobResponse> GetDeadletterJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/deadletter-jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job does not exist.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Move a single deadletter job</summary>
        /// <returns>Indicates the dead letter job was moved. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ExecuteDeadLetterJobActionAsync(string jobId, RestActionRequest body)
        {
            return ExecuteDeadLetterJobActionAsync(jobId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Move a single deadletter job</summary>
        /// <returns>Indicates the dead letter job was moved. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ExecuteDeadLetterJobActionAsync(string jobId, RestActionRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/deadletter-jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the an exception occurred while executing the job. The status-description contains additional detail about the error. The full error-stacktrace can be fetched later on if needed.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a deadletter job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteDeadLetterJobAsync(string jobId)
        {
            return DeleteDeadLetterJobAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a deadletter job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteDeadLetterJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/deadletter-jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get the exception stacktrace for a deadletter job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetDeadLetterJobStacktraceAsync(string jobId)
        {
            return GetDeadLetterJobStacktraceAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the exception stacktrace for a deadletter job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetDeadLetterJobStacktraceAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/deadletter-jobs/{jobId}/exception-stacktrace");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found or the job does not have an exception stacktrace. Status-description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get engine info</summary>
        /// <returns>Indicates the engine info is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CmmnEngineInfoResponse> GetEngineInfoAsync()
        {
            return GetEngineInfoAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get engine info</summary>
        /// <returns>Indicates the engine info is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CmmnEngineInfoResponse> GetEngineInfoAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/engine");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CmmnEngineInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseJobResponse> ListJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort2? sort)
        {
            return ListJobsAsync(id, caseInstanceId, planItemInstanceId, caseDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseJobResponse> ListJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort2? sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/jobs?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (messagesOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("messagesOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(messagesOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withException != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withException") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withException, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueBefore") + "=").Append(System.Uri.EscapeDataString(dueBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueAfter") + "=").Append(System.Uri.EscapeDataString(dueAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exceptionMessage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exceptionMessage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exceptionMessage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (locked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unlocked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unlocked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unlocked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseJobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an illegal value has been used in a url query parameter or the both \'messagesOnly\' and \'timersOnly\' are used as parameters. Status description contains additional details about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a single job</summary>
        /// <returns>Indicates the job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobResponse> GetJobAsync(string jobId)
        {
            return GetJobAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single job</summary>
        /// <returns>Indicates the job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobResponse> GetJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job does not exist.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Execute a single job</summary>
        /// <returns>Indicates the job was executed. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ExecuteJobActionAsync(string jobId, RestActionRequest body)
        {
            return ExecuteJobActionAsync(jobId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Execute a single job</summary>
        /// <returns>Indicates the job was executed. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ExecuteJobActionAsync(string jobId, RestActionRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the an exception occurred while executing the job. The status-description contains additional detail about the error. The full error-stacktrace can be fetched later on if needed.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteJobAsync(string jobId)
        {
            return DeleteJobAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found..", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get the exception stacktrace for a job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetJobStacktraceAsync(string jobId)
        {
            return GetJobStacktraceAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the exception stacktrace for a job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetJobStacktraceAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/jobs/{jobId}/exception-stacktrace");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found or the job does not have an exception stacktrace. Status-description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List suspended jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseJobResponse> ListSuspendedJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort3? sort)
        {
            return ListSuspendedJobsAsync(id, caseInstanceId, planItemInstanceId, caseDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List suspended jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseJobResponse> ListSuspendedJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort3? sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/suspended-jobs?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (messagesOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("messagesOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(messagesOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withException != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withException") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withException, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueBefore") + "=").Append(System.Uri.EscapeDataString(dueBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueAfter") + "=").Append(System.Uri.EscapeDataString(dueAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exceptionMessage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exceptionMessage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exceptionMessage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (locked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unlocked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unlocked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unlocked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseJobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an illegal value has been used in a url query parameter or the both \'messagesOnly\' and \'timersOnly\' are used as parameters. Status description contains additional details about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a single suspended job</summary>
        /// <returns>Indicates the suspended job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobResponse> GetSuspendedJobAsync(string jobId)
        {
            return GetSuspendedJobAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single suspended job</summary>
        /// <returns>Indicates the suspended job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobResponse> GetSuspendedJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/suspended-jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job does not exist.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a suspended job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteSuspendedJobAsync(string jobId)
        {
            return DeleteSuspendedJobAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a suspended job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteSuspendedJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/suspended-jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get the exception stacktrace for a suspended job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetSuspendedJobStacktraceAsync(string jobId)
        {
            return GetSuspendedJobStacktraceAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the exception stacktrace for a suspended job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetSuspendedJobStacktraceAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/suspended-jobs/{jobId}/exception-stacktrace");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found or the job does not have an exception stacktrace. Status-description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List timer jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseJobResponse> ListTimerJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort4? sort)
        {
            return ListTimerJobsAsync(id, caseInstanceId, planItemInstanceId, caseDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List timer jobs</summary>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="caseInstanceId">Only return jobs part of a case with the given id</param>
        /// <param name="planItemInstanceId">Only return jobs part of a plan item instance with the given id</param>
        /// <param name="caseDefinitionId">Only return jobs with the given process definition id</param>
        /// <param name="timersOnly">If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with 'messagesOnly'.</param>
        /// <param name="messagesOnly">If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with 'timersOnly'</param>
        /// <param name="withException">If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored.</param>
        /// <param name="dueBefore">Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="dueAfter">Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter.</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="tenantId">Only return jobs with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="locked">If true, only return jobs which are locked.  If false, this parameter is ignored.</param>
        /// <param name="unlocked">If true, only return jobs which are unlocked. If false, this parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseJobResponse> ListTimerJobsAsync(string id, string caseInstanceId, string planItemInstanceId, string caseDefinitionId, bool? timersOnly, bool? messagesOnly, bool? withException, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, string exceptionMessage, string tenantId, string tenantIdLike, bool? withoutTenantId, bool? locked, bool? unlocked, Sort4? sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/timer-jobs?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timersOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("timersOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(timersOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (messagesOnly != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("messagesOnly") + "=").Append(System.Uri.EscapeDataString(ConvertToString(messagesOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withException != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withException") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withException, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueBefore") + "=").Append(System.Uri.EscapeDataString(dueBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueAfter") + "=").Append(System.Uri.EscapeDataString(dueAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exceptionMessage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exceptionMessage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exceptionMessage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (locked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unlocked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unlocked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unlocked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseJobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an illegal value has been used in a url query parameter or the both \'messagesOnly\' and \'timersOnly\' are used as parameters. Status description contains additional details about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a single timer job</summary>
        /// <returns>Indicates the timer job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobResponse> GetTimerJobAsync(string jobId)
        {
            return GetTimerJobAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single timer job</summary>
        /// <returns>Indicates the timer job exists and is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobResponse> GetTimerJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/timer-jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job does not exist.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Move a single timer job</summary>
        /// <returns>Indicates the timer job was moved. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ExecuteTimerJobActionAsync(string jobId, RestActionRequest body)
        {
            return ExecuteTimerJobActionAsync(jobId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Move a single timer job</summary>
        /// <returns>Indicates the timer job was moved. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ExecuteTimerJobActionAsync(string jobId, RestActionRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/timer-jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the an exception occurred while executing the job. The status-description contains additional detail about the error. The full error-stacktrace can be fetched later on if needed.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a timer job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteTimerJobAsync(string jobId)
        {
            return DeleteTimerJobAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a timer job</summary>
        /// <returns>Indicates the job was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteTimerJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/timer-jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get the exception stacktrace for a timer job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetTimerJobStacktraceAsync(string jobId)
        {
            return GetTimerJobStacktraceAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the exception stacktrace for a timer job</summary>
        /// <returns>Indicates the requested job was not found and the stacktrace has been returned. The response contains the raw stacktrace and always has a Content-type of text/plain.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetTimerJobStacktraceAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-management/timer-jobs/{jobId}/exception-stacktrace");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found or the job does not have an exception stacktrace. Status-description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Query case instances</summary>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseCaseInstanceResponse> QueryCaseInstancesAsync(CaseInstanceQueryRequest body)
        {
            return QueryCaseInstancesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query case instances</summary>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseCaseInstanceResponse> QueryCaseInstancesAsync(CaseInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-query/case-instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseCaseInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates a parameter was passed in the wrong format . The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Query for historic case instances</summary>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricCaseInstanceResponse> QueryHistoricCaseInstanceAsync(HistoricCaseInstanceQueryRequest body)
        {
            return QueryHistoricCaseInstanceAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic case instances</summary>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricCaseInstanceResponse> QueryHistoricCaseInstanceAsync(HistoricCaseInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-query/historic-case-instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricCaseInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Query for historic milestone instances</summary>
        /// <returns>Indicates request was successful and the milestone instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricMilestoneInstanceResponse> QueryHistoricMilestoneInstanceAsync(HistoricMilestoneInstanceQueryRequest body)
        {
            return QueryHistoricMilestoneInstanceAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic milestone instances</summary>
        /// <returns>Indicates request was successful and the milestone instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricMilestoneInstanceResponse> QueryHistoricMilestoneInstanceAsync(HistoricMilestoneInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-query/historic-milestone-instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricMilestoneInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Query for historic plan item instances</summary>
        /// <returns>Indicates request was successful and the plan item instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricPlanItemInstanceResponse> QueryHistoricPlanItemInstanceAsync(HistoricPlanItemInstanceQueryRequest body)
        {
            return QueryHistoricPlanItemInstanceAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic plan item instances</summary>
        /// <returns>Indicates request was successful and the plan item instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricPlanItemInstanceResponse> QueryHistoricPlanItemInstanceAsync(HistoricPlanItemInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-query/historic-planitem-instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricPlanItemInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Query for historic task instances</summary>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricTaskInstanceResponse> QueryHistoricTaskInstanceAsync(HistoricTaskInstanceQueryRequest body)
        {
            return QueryHistoricTaskInstanceAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic task instances</summary>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricTaskInstanceResponse> QueryHistoricTaskInstanceAsync(HistoricTaskInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-query/historic-task-instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricTaskInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Query for historic variable instances</summary>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseHistoricVariableInstanceResponse> QueryVariableInstancesAsync(HistoricVariableInstanceQueryRequest body)
        {
            return QueryVariableInstancesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for historic variable instances</summary>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseHistoricVariableInstanceResponse> QueryVariableInstancesAsync(HistoricVariableInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-query/historic-variable-instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseHistoricVariableInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an parameter was passed in the wrong format. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Query plan item instances</summary>
        /// <returns>Indicates request was successful and the plan item instances are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponsePlanItemInstanceResponse> QueryPlanItemInstancesAsync(PlanItemInstanceQueryRequest body)
        {
            return QueryPlanItemInstancesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query plan item instances</summary>
        /// <returns>Indicates request was successful and the plan item instances are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponsePlanItemInstanceResponse> QueryPlanItemInstancesAsync(PlanItemInstanceQueryRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-query/plan-item-instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponsePlanItemInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates a parameter was passed in the wrong format. The status message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Query for tasks</summary>
        /// <returns>Indicates request was successful and the tasks are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseTaskResponse> QueryTasksAsync(TaskQueryRequest body)
        {
            return QueryTasksAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Query for tasks</summary>
        /// <returns>Indicates request was successful and the tasks are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseTaskResponse> QueryTasksAsync(TaskQueryRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-query/tasks");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseTaskResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates a parameter was passed in the wrong format or that delegationState has an invalid value (other than pending and resolved). The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List of case definitions</summary>
        /// <param name="version">Only return case definitions with the given version.</param>
        /// <param name="name">Only return case definitions with the given name.</param>
        /// <param name="nameLike">Only return case definitions with a name like the given name.</param>
        /// <param name="key">Only return case definitions with the given key.</param>
        /// <param name="keyLike">Only return case definitions with a name like the given key.</param>
        /// <param name="resourceName">Only return case definitions with the given resource name.</param>
        /// <param name="resourceNameLike">Only return case definitions with a name like the given resource name.</param>
        /// <param name="category">Only return case definitions with the given category.</param>
        /// <param name="categoryLike">Only return case definitions with a category like the given name.</param>
        /// <param name="categoryNotEquals">Only return case definitions which do not have the given category.</param>
        /// <param name="deploymentId">Only return case definitions with the given category.</param>
        /// <param name="startableByUser">Only return case definitions which are part of a deployment with the given id.</param>
        /// <param name="latest">Only return the latest case definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response.</param>
        /// <param name="suspended">If true, only returns case definitions which are suspended. If false, only active process definitions (which are not suspended) are returned.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseCaseDefinitionResponse> ListCaseDefinitionsAsync(int? version, string name, string nameLike, string key, string keyLike, string resourceName, string resourceNameLike, string category, string categoryLike, string categoryNotEquals, string deploymentId, string startableByUser, bool? latest, bool? suspended, Sort5? sort)
        {
            return ListCaseDefinitionsAsync(version, name, nameLike, key, keyLike, resourceName, resourceNameLike, category, categoryLike, categoryNotEquals, deploymentId, startableByUser, latest, suspended, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of case definitions</summary>
        /// <param name="version">Only return case definitions with the given version.</param>
        /// <param name="name">Only return case definitions with the given name.</param>
        /// <param name="nameLike">Only return case definitions with a name like the given name.</param>
        /// <param name="key">Only return case definitions with the given key.</param>
        /// <param name="keyLike">Only return case definitions with a name like the given key.</param>
        /// <param name="resourceName">Only return case definitions with the given resource name.</param>
        /// <param name="resourceNameLike">Only return case definitions with a name like the given resource name.</param>
        /// <param name="category">Only return case definitions with the given category.</param>
        /// <param name="categoryLike">Only return case definitions with a category like the given name.</param>
        /// <param name="categoryNotEquals">Only return case definitions which do not have the given category.</param>
        /// <param name="deploymentId">Only return case definitions with the given category.</param>
        /// <param name="startableByUser">Only return case definitions which are part of a deployment with the given id.</param>
        /// <param name="latest">Only return the latest case definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response.</param>
        /// <param name="suspended">If true, only returns case definitions which are suspended. If false, only active process definitions (which are not suspended) are returned.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseCaseDefinitionResponse> ListCaseDefinitionsAsync(int? version, string name, string nameLike, string key, string keyLike, string resourceName, string resourceNameLike, string category, string categoryLike, string categoryNotEquals, string deploymentId, string startableByUser, bool? latest, bool? suspended, Sort5? sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions?");
            if (version != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("version") + "=").Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (key != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("key") + "=").Append(System.Uri.EscapeDataString(ConvertToString(key, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (keyLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("keyLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keyLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (resourceName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("resourceName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resourceName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (resourceNameLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("resourceNameLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(resourceNameLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (category != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (categoryLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("categoryLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(categoryLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (categoryNotEquals != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("categoryNotEquals") + "=").Append(System.Uri.EscapeDataString(ConvertToString(categoryNotEquals, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deploymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deploymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deploymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startableByUser != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startableByUser") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startableByUser, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (latest != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("latest") + "=").Append(System.Uri.EscapeDataString(ConvertToString(latest, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (suspended != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suspended") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suspended, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseCaseDefinitionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates a parameter was passed in the wrong format or that latest is used with other parameters other than key and keyLike. The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a case definition</summary>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseDefinitionResponse> GetCaseDefinitionAsync(string caseDefinitionId)
        {
            return GetCaseDefinitionAsync(caseDefinitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition</summary>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseDefinitionResponse> GetCaseDefinitionAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseDefinitionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Execute actions for a case definition</summary>
        /// <returns>Indicates action has been executed for the specified process. (category altered)</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseDefinitionResponse> ExecuteCaseDefinitionActionAsync(string caseDefinitionId, CaseDefinitionActionRequest body)
        {
            return ExecuteCaseDefinitionActionAsync(caseDefinitionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Execute actions for a case definition</summary>
        /// <returns>Indicates action has been executed for the specified process. (category altered)</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseDefinitionResponse> ExecuteCaseDefinitionActionAsync(string caseDefinitionId, CaseDefinitionActionRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseDefinitionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates no category was defined in the request body.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List decision tables for a case definition</summary>
        /// <returns>Indicates the case definition was found and the decision tables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DmnDecisionTable>> ListCaseDefinitionDecisionTablesAsync(string caseDefinitionId)
        {
            return ListCaseDefinitionDecisionTablesAsync(caseDefinitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List decision tables for a case definition</summary>
        /// <returns>Indicates the case definition was found and the decision tables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DmnDecisionTable>> ListCaseDefinitionDecisionTablesAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/decision-tables");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DmnDecisionTable>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List form definitions for a case definition</summary>
        /// <returns>Indicates the case definition was found and the form definitions are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FormDefinition>> ListCaseDefinitionFormDefinitionsAsync(string caseDefinitionId)
        {
            return ListCaseDefinitionFormDefinitionsAsync(caseDefinitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List form definitions for a case definition</summary>
        /// <returns>Indicates the case definition was found and the form definitions are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FormDefinition>> ListCaseDefinitionFormDefinitionsAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/form-definitions");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FormDefinition>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List candidate starters for a case definition</summary>
        /// <returns>Indicates the case definition was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListCaseDefinitionIdentityLinksAsync(string caseDefinitionId)
        {
            return ListCaseDefinitionIdentityLinksAsync(caseDefinitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List candidate starters for a case definition</summary>
        /// <returns>Indicates the case definition was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListCaseDefinitionIdentityLinksAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/identitylinks");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RestIdentityLink>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Add a candidate starter to a case definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestIdentityLink> CreateIdentityLinkAsync(string caseDefinitionId, RestIdentityLink body)
        {
            return CreateIdentityLinkAsync(caseDefinitionId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a candidate starter to a case definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestIdentityLink> CreateIdentityLinkAsync(string caseDefinitionId, RestIdentityLink body, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/identitylinks");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestIdentityLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the case definition was found and the identity link was created.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the body does not contain the correct information.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a candidate starter from a case definition</summary>
        /// <returns>Indicates the case definition was found and the identity link was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestIdentityLink> GetIdentityLinkAsync(string caseDefinitionId, string family, string identityId)
        {
            return GetIdentityLinkAsync(caseDefinitionId, family, identityId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a candidate starter from a case definition</summary>
        /// <returns>Indicates the case definition was found and the identity link was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestIdentityLink> GetIdentityLinkAsync(string caseDefinitionId, string family, string identityId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            if (family == null)
                throw new System.ArgumentNullException("family");

            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/identitylinks/{family}/{identityId}");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{family}", System.Uri.EscapeDataString(ConvertToString(family, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{identityId}", System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestIdentityLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found or the case definition does not have an identity-link that matches the url.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a candidate starter from a case definition</summary>
        /// <returns>Indicates the case definition was found and the identity link was removed. The response body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteIdentityLinkAsync(string caseDefinitionId, string family, string identityId)
        {
            return DeleteIdentityLinkAsync(caseDefinitionId, family, identityId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a candidate starter from a case definition</summary>
        /// <returns>Indicates the case definition was found and the identity link was removed. The response body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteIdentityLinkAsync(string caseDefinitionId, string family, string identityId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            if (family == null)
                throw new System.ArgumentNullException("family");

            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/identitylinks/{family}/{identityId}");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{family}", System.Uri.EscapeDataString(ConvertToString(family, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{identityId}", System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found or the case definition does not have an identity-link that matches the url.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a case definition image</summary>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetImageResourceAsync(string caseDefinitionId)
        {
            return GetImageResourceAsync(caseDefinitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition image</summary>
        /// <returns>Indicates request was successful and the case definitions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetImageResourceAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/image");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("image/png"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<byte[]>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a case definition CMMN model</summary>
        /// <returns>Indicates the process definition was found and the model is returned. The response contains the full process definition model.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CmmnModel> GetCmmnModelResourceAsync(string caseDefinitionId)
        {
            return GetCmmnModelResourceAsync(caseDefinitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition CMMN model</summary>
        /// <returns>Indicates the process definition was found and the model is returned. The response contains the full process definition model.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CmmnModel> GetCmmnModelResourceAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/model");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CmmnModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested process definition was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a case definition resource content</summary>
        /// <returns>Indicates both case definition and resource have been found and the resource data has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetProcessDefinitionResourceAsync(string caseDefinitionId)
        {
            return GetProcessDefinitionResourceAsync(caseDefinitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition resource content</summary>
        /// <returns>Indicates both case definition and resource have been found and the resource data has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetProcessDefinitionResourceAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/resourcedata");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<byte[]>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found or there is no resource with the given id present in the case definition. The status-description contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a case definition start form</summary>
        /// <returns>Indicates request was successful and the case definition form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetProcessDefinitionStartFormAsync(string caseDefinitionId)
        {
            return GetProcessDefinitionStartFormAsync(caseDefinitionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case definition start form</summary>
        /// <returns>Indicates request was successful and the case definition form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetProcessDefinitionStartFormAsync(string caseDefinitionId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseDefinitionId == null)
                throw new System.ArgumentNullException("caseDefinitionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/case-definitions/{caseDefinitionId}/start-form");
            urlBuilder_.Replace("{caseDefinitionId}", System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case definition was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List Deployments</summary>
        /// <param name="name">Only return deployments with the given name.</param>
        /// <param name="nameLike">Only return deployments with a name like the given name.</param>
        /// <param name="category">Only return deployments with the given category.</param>
        /// <param name="categoryNotEquals">Only return deployments which do not have the given category.</param>
        /// <param name="parentDeploymentId">Only return deployments with the given parent deployment id.</param>
        /// <param name="parentDeploymentIdLike">Only return deployments with a parent deployment id like the given value.</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value.</param>
        /// <param name="tenantId">Only return deployments with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the request was successful.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseCmmnDeploymentResponse> ListDeploymentsAsync(string name, string nameLike, string category, string categoryNotEquals, string parentDeploymentId, string parentDeploymentIdLike, string tenantIdLike, string tenantId, bool? withoutTenantId, Sort6? sort)
        {
            return ListDeploymentsAsync(name, nameLike, category, categoryNotEquals, parentDeploymentId, parentDeploymentIdLike, tenantIdLike, tenantId, withoutTenantId, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List Deployments</summary>
        /// <param name="name">Only return deployments with the given name.</param>
        /// <param name="nameLike">Only return deployments with a name like the given name.</param>
        /// <param name="category">Only return deployments with the given category.</param>
        /// <param name="categoryNotEquals">Only return deployments which do not have the given category.</param>
        /// <param name="parentDeploymentId">Only return deployments with the given parent deployment id.</param>
        /// <param name="parentDeploymentIdLike">Only return deployments with a parent deployment id like the given value.</param>
        /// <param name="tenantIdLike">Only return deployments with a tenantId like the given value.</param>
        /// <param name="tenantId">Only return deployments with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates the request was successful.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseCmmnDeploymentResponse> ListDeploymentsAsync(string name, string nameLike, string category, string categoryNotEquals, string parentDeploymentId, string parentDeploymentIdLike, string tenantIdLike, string tenantId, bool? withoutTenantId, Sort6? sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/deployments?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (category != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (categoryNotEquals != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("categoryNotEquals") + "=").Append(System.Uri.EscapeDataString(ConvertToString(categoryNotEquals, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (parentDeploymentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("parentDeploymentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(parentDeploymentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (parentDeploymentIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("parentDeploymentIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(parentDeploymentIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseCmmnDeploymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Create a new deployment</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CmmnDeploymentResponse> UploadDeploymentAsync(string deploymentKey, string deploymentName, string tenantId, FileParameter file)
        {
            return UploadDeploymentAsync(deploymentKey, deploymentName, tenantId, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new deployment</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CmmnDeploymentResponse> UploadDeploymentAsync(string deploymentKey, string deploymentName, string tenantId, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/deployments?");
            if (deploymentKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deploymentKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deploymentKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deploymentName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deploymentName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deploymentName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CmmnDeploymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the deployment was created.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates there was no content present in the request body or the content mime-type is not supported for deployment. The status-description contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a deployment</summary>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>Indicates the deployment was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CmmnDeploymentResponse> GetDeploymentAsync(string deploymentId)
        {
            return GetDeploymentAsync(deploymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a deployment</summary>
        /// <param name="deploymentId">The id of the deployment to get.</param>
        /// <returns>Indicates the deployment was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CmmnDeploymentResponse> GetDeploymentAsync(string deploymentId, System.Threading.CancellationToken cancellationToken)
        {
            if (deploymentId == null)
                throw new System.ArgumentNullException("deploymentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/deployments/{deploymentId}");
            urlBuilder_.Replace("{deploymentId}", System.Uri.EscapeDataString(ConvertToString(deploymentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CmmnDeploymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested deployment was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a deployment</summary>
        /// <returns>Indicates the deployment was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteDeploymentAsync(string deploymentId, bool? cascade)
        {
            return DeleteDeploymentAsync(deploymentId, cascade, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a deployment</summary>
        /// <returns>Indicates the deployment was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteDeploymentAsync(string deploymentId, bool? cascade, System.Threading.CancellationToken cancellationToken)
        {
            if (deploymentId == null)
                throw new System.ArgumentNullException("deploymentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/deployments/{deploymentId}?");
            urlBuilder_.Replace("{deploymentId}", System.Uri.EscapeDataString(ConvertToString(deploymentId, System.Globalization.CultureInfo.InvariantCulture)));
            if (cascade != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cascade") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cascade, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested deployment was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a deployment resource content</summary>
        /// <param name="resourceName">The name of the resource to get. Make sure you URL-encode the resourceName in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/my-process.bpmn20.xml.</param>
        /// <returns>Indicates both deployment and resource have been found and the resource data has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetDeploymentResourceDataAsync(string deploymentId, string resourceName)
        {
            return GetDeploymentResourceDataAsync(deploymentId, resourceName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a deployment resource content</summary>
        /// <param name="resourceName">The name of the resource to get. Make sure you URL-encode the resourceName in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/my-process.bpmn20.xml.</param>
        /// <returns>Indicates both deployment and resource have been found and the resource data has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetDeploymentResourceDataAsync(string deploymentId, string resourceName, System.Threading.CancellationToken cancellationToken)
        {
            if (deploymentId == null)
                throw new System.ArgumentNullException("deploymentId");

            if (resourceName == null)
                throw new System.ArgumentNullException("resourceName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/deployments/{deploymentId}/resourcedata/{resourceName}");
            urlBuilder_.Replace("{deploymentId}", System.Uri.EscapeDataString(ConvertToString(deploymentId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{resourceName}", System.Uri.EscapeDataString(ConvertToString(resourceName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<byte[]>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested deployment was not found or there is no resource with the given id present in the deployment. The status-description contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List resources in a deployment</summary>
        /// <returns>Indicates the deployment was found and the resource list has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentResourceResponse>> ListDeploymentResourcesAsync(string deploymentId)
        {
            return ListDeploymentResourcesAsync(deploymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List resources in a deployment</summary>
        /// <returns>Indicates the deployment was found and the resource list has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeploymentResourceResponse>> ListDeploymentResourcesAsync(string deploymentId, System.Threading.CancellationToken cancellationToken)
        {
            if (deploymentId == null)
                throw new System.ArgumentNullException("deploymentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/deployments/{deploymentId}/resources");
            urlBuilder_.Replace("{deploymentId}", System.Uri.EscapeDataString(ConvertToString(deploymentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DeploymentResourceResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested deployment was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a deployment resource</summary>
        /// <returns>Indicates both deployment and resource have been found and the resource has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeploymentResourceResponse> GetDeploymentResourceAsync(string deploymentId)
        {
            return GetDeploymentResourceAsync(deploymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a deployment resource</summary>
        /// <returns>Indicates both deployment and resource have been found and the resource has been returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeploymentResourceResponse> GetDeploymentResourceAsync(string deploymentId, System.Threading.CancellationToken cancellationToken)
        {
            if (deploymentId == null)
                throw new System.ArgumentNullException("deploymentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-repository/deployments/{deploymentId}/resources/**");
            urlBuilder_.Replace("{deploymentId}", System.Uri.EscapeDataString(ConvertToString(deploymentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeploymentResourceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested deployment was not found or there is no resource with the given id present in the deployment. The status-description contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List case instances</summary>
        /// <param name="id">Only return models with the given version.</param>
        /// <param name="caseDefinitionKey">Only return case instances with the given case definition key.</param>
        /// <param name="caseDefinitionId">Only return case instances with the given case definition id.</param>
        /// <param name="businessKey">Only return case instances with the given businessKey.</param>
        /// <param name="superCaseInstanceId">Only return case instances which have the given super case instance id (for cases that have a case tasks).</param>
        /// <param name="includeCaseVariables">Indication to include case variables in the result.</param>
        /// <param name="tenantId">Only return case instances with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return case instances with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns case instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseCaseInstanceResponse> ListCaseInstancesAsync(string id, string caseDefinitionKey, string caseDefinitionId, string businessKey, string superCaseInstanceId, bool? includeCaseVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, Sort7? sort)
        {
            return ListCaseInstancesAsync(id, caseDefinitionKey, caseDefinitionId, businessKey, superCaseInstanceId, includeCaseVariables, tenantId, tenantIdLike, withoutTenantId, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List case instances</summary>
        /// <param name="id">Only return models with the given version.</param>
        /// <param name="caseDefinitionKey">Only return case instances with the given case definition key.</param>
        /// <param name="caseDefinitionId">Only return case instances with the given case definition id.</param>
        /// <param name="businessKey">Only return case instances with the given businessKey.</param>
        /// <param name="superCaseInstanceId">Only return case instances which have the given super case instance id (for cases that have a case tasks).</param>
        /// <param name="includeCaseVariables">Indication to include case variables in the result.</param>
        /// <param name="tenantId">Only return case instances with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return case instances with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns case instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the case instances are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseCaseInstanceResponse> ListCaseInstancesAsync(string id, string caseDefinitionKey, string caseDefinitionId, string businessKey, string superCaseInstanceId, bool? includeCaseVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, Sort7? sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (businessKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("businessKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(businessKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (superCaseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("superCaseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(superCaseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeCaseVariables != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeCaseVariables") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeCaseVariables, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseCaseInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates a parameter was passed in the wrong format . The status message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Start a case instance</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseInstanceResponse> CreateCaseInstanceAsync(CaseInstanceCreateRequest body)
        {
            return CreateCaseInstanceAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a case instance</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseInstanceResponse> CreateCaseInstanceAsync(CaseInstanceCreateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates either the case definition was not found (based on id or key), no process is started by sending the given message or an invalid variable has been passed. Status description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a case instance</summary>
        /// <returns>Indicates the case instance was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseInstanceResponse> GetCaseInstanceAsync(string caseInstanceId)
        {
            return GetCaseInstanceAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a case instance</summary>
        /// <returns>Indicates the case instance was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseInstanceResponse> GetCaseInstanceAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Execute an action on a case instance</summary>
        /// <returns>Indicates the case instance was found and the action is performed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CaseInstanceResponse> PerformCaseInstanceActionAsync(string caseInstanceId, RestActionRequest body)
        {
            return PerformCaseInstanceActionAsync(caseInstanceId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Execute an action on a case instance</summary>
        /// <returns>Indicates the case instance was found and the action is performed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CaseInstanceResponse> PerformCaseInstanceActionAsync(string caseInstanceId, RestActionRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CaseInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the case was found, the action was performed and the action caused the case instance to end.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an illegal action was requested, required parameters are missing in the request body or illegal variables are passed in. Status description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a case instance</summary>
        /// <returns>Indicates the case instance was found and deleted. Response body is left empty intentionally.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCaseInstanceAsync(string caseInstanceId, string deleteReason)
        {
            return DeleteCaseInstanceAsync(caseInstanceId, deleteReason, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a case instance</summary>
        /// <returns>Indicates the case instance was found and deleted. Response body is left empty intentionally.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCaseInstanceAsync(string caseInstanceId, string deleteReason, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}?");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (deleteReason != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deleteReason") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deleteReason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get diagram for a case instance</summary>
        /// <returns>Indicates the case instance was found and the diagram was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetCaseInstanceDiagramAsync(string caseInstanceId)
        {
            return GetCaseInstanceDiagramAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get diagram for a case instance</summary>
        /// <returns>Indicates the case instance was found and the diagram was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetCaseInstanceDiagramAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/diagram");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<byte[]>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found but the process does not contain any graphical information (CMMN DI) and no diagram can be created.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get involved people for case instance</summary>
        /// <returns>Indicates the case instance was found and links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListCaseInstanceIdentityLinksAsync(string caseInstanceId)
        {
            return ListCaseInstanceIdentityLinksAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get involved people for case instance</summary>
        /// <returns>Indicates the case instance was found and links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListCaseInstanceIdentityLinksAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/identitylinks");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RestIdentityLink>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Add an involved user to a case instance</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestIdentityLink> CreateCaseInstanceIdentityLinksAsync(string caseInstanceId, RestIdentityLink body)
        {
            return CreateCaseInstanceIdentityLinksAsync(caseInstanceId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add an involved user to a case instance</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestIdentityLink> CreateCaseInstanceIdentityLinksAsync(string caseInstanceId, RestIdentityLink body, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/identitylinks");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestIdentityLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the case instance was found and the link is created.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested body did not contain a userId or a type.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a specific involved people from case instance</summary>
        /// <returns>Indicates the case instance was found and the specified link is retrieved.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestIdentityLink> GetCaseInstanceIdentityLinksAsync(string caseInstanceId, string identityId, string type)
        {
            return GetCaseInstanceIdentityLinksAsync(caseInstanceId, identityId, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a specific involved people from case instance</summary>
        /// <returns>Indicates the case instance was found and the specified link is retrieved.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestIdentityLink> GetCaseInstanceIdentityLinksAsync(string caseInstanceId, string identityId, string type, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            if (type == null)
                throw new System.ArgumentNullException("type");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/identitylinks/users/{identityId}/{type}");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{identityId}", System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{type}", System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestIdentityLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found or the link to delete does not exist. The response status contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Remove an involved user to from case instance</summary>
        /// <returns>Indicates the case instance was found and the link has been deleted. Response body is left empty intentionally.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCaseInstanceIdentityLinksAsync(string caseInstanceId, string identityId, string type)
        {
            return DeleteCaseInstanceIdentityLinksAsync(caseInstanceId, identityId, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove an involved user to from case instance</summary>
        /// <returns>Indicates the case instance was found and the link has been deleted. Response body is left empty intentionally.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCaseInstanceIdentityLinksAsync(string caseInstanceId, string identityId, string type, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            if (type == null)
                throw new System.ArgumentNullException("type");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/identitylinks/users/{identityId}/{type}");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{identityId}", System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{type}", System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found or the link to delete does not exist. The response status contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StageResponse>> GetStageOverviewAsync(string caseInstanceId)
        {
            return GetStageOverviewAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StageResponse>> GetStageOverviewAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/stage-overview");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StageResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List variables for a case instance</summary>
        /// <returns>Indicates the case instance was found and variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestVariable>> ListCaseInstanceVariablesAsync(string caseInstanceId)
        {
            return ListCaseInstanceVariablesAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List variables for a case instance</summary>
        /// <returns>Indicates the case instance was found and variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestVariable>> ListCaseInstanceVariablesAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/variables");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RestVariable>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Create variables or new binary variable on a case instance</summary>
        /// <param name="body">Create a variable on a case instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> CreateCaseInstanceVariableAsync(string caseInstanceId, CaseInstanceVariableCollectionResource body, FileParameter file, string name, string type)
        {
            return CreateCaseInstanceVariableAsync(caseInstanceId, body, file, name, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create variables or new binary variable on a case instance</summary>
        /// <param name="body">Create a variable on a case instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateCaseInstanceVariableAsync(string caseInstanceId, CaseInstanceVariableCollectionResource body, FileParameter file, string name, string type, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/variables");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the case instance was found and variable is created.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the request body is incomplete or contains illegal values. The status description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the case instance was found but already contains a variable with the given name (only thrown when POST method is used). Use the update-method instead.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Update a multiple/single (non)binary variable on a case instance</summary>
        /// <param name="body">Create a variable on a process instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> CreateOrUpdateCaseVariableAsync(string caseInstanceId, CaseInstanceVariableCollectionResource body, FileParameter file, string name, string type)
        {
            return CreateOrUpdateCaseVariableAsync(caseInstanceId, body, file, name, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a multiple/single (non)binary variable on a case instance</summary>
        /// <param name="body">Create a variable on a process instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateOrUpdateCaseVariableAsync(string caseInstanceId, CaseInstanceVariableCollectionResource body, FileParameter file, string name, string type, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/variables");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the case instance was found and variable is created.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the request body is incomplete or contains illegal values. The status description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the serializable data contains an object for which no class is present in the JVM running the Flowable engine and therefore cannot be deserialized.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete all variables</summary>
        /// <returns>Indicates variables were found and have been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCaseVariableAsync(string caseInstanceId)
        {
            return DeleteCaseVariableAsync(caseInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete all variables</summary>
        /// <returns>Indicates variables were found and have been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCaseVariableAsync(string caseInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/variables");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a variable for a case instance</summary>
        /// <returns>Indicates both the case instance and variable were found and variable is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestVariable> GetCaseInstanceVariableAsync(string caseInstanceId, string variableName, string scope)
        {
            return GetCaseInstanceVariableAsync(caseInstanceId, variableName, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a variable for a case instance</summary>
        /// <returns>Indicates both the case instance and variable were found and variable is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestVariable> GetCaseInstanceVariableAsync(string caseInstanceId, string variableName, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/variables/{variableName}?");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));
            if (scope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestVariable>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found or the case instance does not have a variable with the given name. Status description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Update a single variable on a case instance</summary>
        /// <param name="body">Create a variable on a case instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestVariable> UpdateCaseInstanceVariableAsync(string caseInstanceId, string variableName, CaseInstanceVariableResource body, FileParameter file, string name, string type)
        {
            return UpdateCaseInstanceVariableAsync(caseInstanceId, variableName, body, file, name, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a single variable on a case instance</summary>
        /// <param name="body">Create a variable on a case instance</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestVariable> UpdateCaseInstanceVariableAsync(string caseInstanceId, string variableName, CaseInstanceVariableResource body, FileParameter file, string name, string type, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/variables/{variableName}");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestVariable>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates both the case instance and variable were found and variable is updated.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested case instance was not found or the process instance does not have a variable with the given name. Status description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a variable</summary>
        /// <returns>Indicates the variable was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteCaseInstanceVariableAsync(string caseInstanceId, string variableName, string scope)
        {
            return DeleteCaseInstanceVariableAsync(caseInstanceId, variableName, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a variable</summary>
        /// <returns>Indicates the variable was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteCaseInstanceVariableAsync(string caseInstanceId, string variableName, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/variables/{variableName}?");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));
            if (scope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested variable was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get the binary data for a variable</summary>
        /// <returns>Indicates the case instance was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetCaseInstanceVariableDataAsync(string caseInstanceId, string variableName, string scope)
        {
            return GetCaseInstanceVariableDataAsync(caseInstanceId, variableName, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a variable</summary>
        /// <returns>Indicates the case instance was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetCaseInstanceVariableDataAsync(string caseInstanceId, string variableName, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (caseInstanceId == null)
                throw new System.ArgumentNullException("caseInstanceId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/case-instances/{caseInstanceId}/variables/{variableName}/data?");
            urlBuilder_.Replace("{caseInstanceId}", System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));
            if (scope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<byte[]>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found or the task does not have a variable with the given name (in the given scope). Status message provides additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List of plan item instances</summary>
        /// <param name="id">Only return models with the given version.</param>
        /// <param name="caseDefinitionId">Only return plan item instances with the given case definition id.</param>
        /// <param name="caseInstanceId">Only return plan item instances which are part of the case instance with the given id.</param>
        /// <param name="stageInstanceId">Only return plan item instances which are part of the given stage instance.</param>
        /// <param name="planItemDefinitionId">Only return plan item instances which have the given plan item definition id.</param>
        /// <param name="planItemDefinitionType">Only return plan item instances which have the given plan item definition type.</param>
        /// <param name="planItemDefinitionTypes">Only return plan item instances which have any of the given plan item definition types. Comma-separated string e.g. humantask, stage</param>
        /// <param name="state">Only return plan item instances which have the given state.</param>
        /// <param name="name">Only return plan item instances which have the given name.</param>
        /// <param name="elementId">Only return plan item instances which have the given element id.</param>
        /// <param name="referenceId">Only return plan item instances which have the given reference id.</param>
        /// <param name="referenceType">Only return plan item instances which have the given reference type.</param>
        /// <param name="createdBefore">Only return plan item instances which are created before the given date.</param>
        /// <param name="createdAfter">Only return plan item instances which are created after the given date.</param>
        /// <param name="startUserId">Only return plan item instances which are started by the given user id.</param>
        /// <param name="tenantId">Only return plan item instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns plan item instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the executions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponsePlanItemInstanceResponse> ListPlanItemInstancesAsync(string id, string caseDefinitionId, string caseInstanceId, string stageInstanceId, string planItemDefinitionId, string planItemDefinitionType, string planItemDefinitionTypes, string state, string name, string elementId, string referenceId, string referenceType, object createdBefore, object createdAfter, string startUserId, string tenantId, bool? withoutTenantId, Sort8? sort)
        {
            return ListPlanItemInstancesAsync(id, caseDefinitionId, caseInstanceId, stageInstanceId, planItemDefinitionId, planItemDefinitionType, planItemDefinitionTypes, state, name, elementId, referenceId, referenceType, createdBefore, createdAfter, startUserId, tenantId, withoutTenantId, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of plan item instances</summary>
        /// <param name="id">Only return models with the given version.</param>
        /// <param name="caseDefinitionId">Only return plan item instances with the given case definition id.</param>
        /// <param name="caseInstanceId">Only return plan item instances which are part of the case instance with the given id.</param>
        /// <param name="stageInstanceId">Only return plan item instances which are part of the given stage instance.</param>
        /// <param name="planItemDefinitionId">Only return plan item instances which have the given plan item definition id.</param>
        /// <param name="planItemDefinitionType">Only return plan item instances which have the given plan item definition type.</param>
        /// <param name="planItemDefinitionTypes">Only return plan item instances which have any of the given plan item definition types. Comma-separated string e.g. humantask, stage</param>
        /// <param name="state">Only return plan item instances which have the given state.</param>
        /// <param name="name">Only return plan item instances which have the given name.</param>
        /// <param name="elementId">Only return plan item instances which have the given element id.</param>
        /// <param name="referenceId">Only return plan item instances which have the given reference id.</param>
        /// <param name="referenceType">Only return plan item instances which have the given reference type.</param>
        /// <param name="createdBefore">Only return plan item instances which are created before the given date.</param>
        /// <param name="createdAfter">Only return plan item instances which are created after the given date.</param>
        /// <param name="startUserId">Only return plan item instances which are started by the given user id.</param>
        /// <param name="tenantId">Only return plan item instances with the given tenantId.</param>
        /// <param name="withoutTenantId">If true, only returns plan item instances without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="sort">Property to sort on, to be used together with the order.</param>
        /// <returns>Indicates request was successful and the executions are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponsePlanItemInstanceResponse> ListPlanItemInstancesAsync(string id, string caseDefinitionId, string caseInstanceId, string stageInstanceId, string planItemDefinitionId, string planItemDefinitionType, string planItemDefinitionTypes, string state, string name, string elementId, string referenceId, string referenceType, object createdBefore, object createdAfter, string startUserId, string tenantId, bool? withoutTenantId, Sort8? sort, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/plan-item-instances?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stageInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("stageInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stageInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemDefinitionType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemDefinitionType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemDefinitionType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (planItemDefinitionTypes != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("planItemDefinitionTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(planItemDefinitionTypes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (state != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("state") + "=").Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (elementId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("elementId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (referenceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("referenceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(referenceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (referenceType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("referenceType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(referenceType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdBefore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdBefore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdAfter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdAfter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startUserId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startUserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startUserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponsePlanItemInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates a parameter was passed in the wrong format . The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get an plan item instance</summary>
        /// <returns>Indicates the plan item instance was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PlanItemInstanceResponse> GetPlanItemInstanceAsync(string planItemInstanceId)
        {
            return GetPlanItemInstanceAsync(planItemInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get an plan item instance</summary>
        /// <returns>Indicates the plan item instance was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PlanItemInstanceResponse> GetPlanItemInstanceAsync(string planItemInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (planItemInstanceId == null)
                throw new System.ArgumentNullException("planItemInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/plan-item-instances/{planItemInstanceId}");
            urlBuilder_.Replace("{planItemInstanceId}", System.Uri.EscapeDataString(ConvertToString(planItemInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlanItemInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the plan item instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Execute an action on a plan item instance</summary>
        /// <returns>Indicates the plan item instance was found and the action is performed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PlanItemInstanceResponse> PerformPlanItemInstanceActionAsync(string planItemInstanceId, RestActionRequest body)
        {
            return PerformPlanItemInstanceActionAsync(planItemInstanceId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Execute an action on a plan item instance</summary>
        /// <returns>Indicates the plan item instance was found and the action is performed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PlanItemInstanceResponse> PerformPlanItemInstanceActionAsync(string planItemInstanceId, RestActionRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (planItemInstanceId == null)
                throw new System.ArgumentNullException("planItemInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/plan-item-instances/{planItemInstanceId}");
            urlBuilder_.Replace("{planItemInstanceId}", System.Uri.EscapeDataString(ConvertToString(planItemInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlanItemInstanceResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the plan item instance was found, the action was performed and the action caused the plan item instance to end.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an illegal action was requested, required parameters are missing in the request body or illegal variables are passed in. Status description contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the plan item instance was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List of tasks</summary>
        /// <param name="name">Only return models with the given version.</param>
        /// <param name="nameLike">Only return tasks with a name like the given name.</param>
        /// <param name="description">Only return tasks with the given description.</param>
        /// <param name="priority">Only return tasks with the given priority.</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value.</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value.</param>
        /// <param name="assignee">Only return tasks assigned to the given user.</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value.</param>
        /// <param name="owner">Only return tasks owned by the given user.</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value.</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored.</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved.</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of.</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group.</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma.</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved.</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id.</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value.</param>
        /// <param name="caseInstanceId">Only return tasks which are part of the case instance with the given id.</param>
        /// <param name="caseInstanceIdWithChildren">Only return tasks which are part of the case instance and its children with the given id.</param>
        /// <param name="caseDefinitionId">Only return tasks which are part of a case instance which has a case definition with the given id.</param>
        /// <param name="createdOn">Only return tasks which are created on the given date.</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date.</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date.</param>
        /// <param name="dueOn">Only return tasks which are due on the given date.</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date.</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date.</param>
        /// <param name="withoutDueDate">Only return tasks which do not have a due date. The property is ignored if the value is false.</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task.</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned.</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result.</param>
        /// <param name="tenantId">Only return tasks with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups).</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).</param>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseTaskResponse> ListTasksAsync(string name, string nameLike, string description, string priority, string minimumPriority, string maximumPriority, string assignee, string assigneeLike, string owner, string ownerLike, string unassigned, string delegationState, string candidateUser, string candidateGroup, string candidateGroups, string involvedUser, string taskDefinitionKey, string taskDefinitionKeyLike, string caseInstanceId, string caseInstanceIdWithChildren, string caseDefinitionId, System.DateTimeOffset? createdOn, System.DateTimeOffset? createdBefore, System.DateTimeOffset? createdAfter, System.DateTimeOffset? dueOn, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, bool? withoutDueDate, bool? excludeSubTasks, bool? active, bool? includeTaskLocalVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, string candidateOrAssigned, string category)
        {
            return ListTasksAsync(name, nameLike, description, priority, minimumPriority, maximumPriority, assignee, assigneeLike, owner, ownerLike, unassigned, delegationState, candidateUser, candidateGroup, candidateGroups, involvedUser, taskDefinitionKey, taskDefinitionKeyLike, caseInstanceId, caseInstanceIdWithChildren, caseDefinitionId, createdOn, createdBefore, createdAfter, dueOn, dueBefore, dueAfter, withoutDueDate, excludeSubTasks, active, includeTaskLocalVariables, tenantId, tenantIdLike, withoutTenantId, candidateOrAssigned, category, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of tasks</summary>
        /// <param name="name">Only return models with the given version.</param>
        /// <param name="nameLike">Only return tasks with a name like the given name.</param>
        /// <param name="description">Only return tasks with the given description.</param>
        /// <param name="priority">Only return tasks with the given priority.</param>
        /// <param name="minimumPriority">Only return tasks with a priority greater than the given value.</param>
        /// <param name="maximumPriority">Only return tasks with a priority lower than the given value.</param>
        /// <param name="assignee">Only return tasks assigned to the given user.</param>
        /// <param name="assigneeLike">Only return tasks assigned with an assignee like the given value.</param>
        /// <param name="owner">Only return tasks owned by the given user.</param>
        /// <param name="ownerLike">Only return tasks assigned with an owner like the given value.</param>
        /// <param name="unassigned">Only return tasks that are not assigned to anyone. If false is passed, the value is ignored.</param>
        /// <param name="delegationState">Only return tasks that have the given delegation state. Possible values are pending and resolved.</param>
        /// <param name="candidateUser">Only return tasks that can be claimed by the given user. This includes both tasks where the user is an explicit candidate for and task that are claimable by a group that the user is a member of.</param>
        /// <param name="candidateGroup">Only return tasks that can be claimed by a user in the given group.</param>
        /// <param name="candidateGroups">Only return tasks that can be claimed by a user in the given groups. Values split by comma.</param>
        /// <param name="involvedUser">Only return tasks in which the given user is involved.</param>
        /// <param name="taskDefinitionKey">Only return tasks with the given task definition id.</param>
        /// <param name="taskDefinitionKeyLike">Only return tasks with a given task definition id like the given value.</param>
        /// <param name="caseInstanceId">Only return tasks which are part of the case instance with the given id.</param>
        /// <param name="caseInstanceIdWithChildren">Only return tasks which are part of the case instance and its children with the given id.</param>
        /// <param name="caseDefinitionId">Only return tasks which are part of a case instance which has a case definition with the given id.</param>
        /// <param name="createdOn">Only return tasks which are created on the given date.</param>
        /// <param name="createdBefore">Only return tasks which are created before the given date.</param>
        /// <param name="createdAfter">Only return tasks which are created after the given date.</param>
        /// <param name="dueOn">Only return tasks which are due on the given date.</param>
        /// <param name="dueBefore">Only return tasks which are due before the given date.</param>
        /// <param name="dueAfter">Only return tasks which are due after the given date.</param>
        /// <param name="withoutDueDate">Only return tasks which do not have a due date. The property is ignored if the value is false.</param>
        /// <param name="excludeSubTasks">Only return tasks that are not a subtask of another task.</param>
        /// <param name="active">If true, only return tasks that are not suspended (either part of a process that is not suspended or not part of a process at all). If false, only tasks that are part of suspended process instances are returned.</param>
        /// <param name="includeTaskLocalVariables">Indication to include task local variables in the result.</param>
        /// <param name="tenantId">Only return tasks with the given tenantId.</param>
        /// <param name="tenantIdLike">Only return tasks with a tenantId like the given value.</param>
        /// <param name="withoutTenantId">If true, only returns tasks without a tenantId set. If false, the withoutTenantId parameter is ignored.</param>
        /// <param name="candidateOrAssigned">Select tasks that has been claimed or assigned to user or waiting to claim by user (candidate user or groups).</param>
        /// <param name="category">Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml).</param>
        /// <returns>Indicates request was successful and the tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseTaskResponse> ListTasksAsync(string name, string nameLike, string description, string priority, string minimumPriority, string maximumPriority, string assignee, string assigneeLike, string owner, string ownerLike, string unassigned, string delegationState, string candidateUser, string candidateGroup, string candidateGroups, string involvedUser, string taskDefinitionKey, string taskDefinitionKeyLike, string caseInstanceId, string caseInstanceIdWithChildren, string caseDefinitionId, System.DateTimeOffset? createdOn, System.DateTimeOffset? createdBefore, System.DateTimeOffset? createdAfter, System.DateTimeOffset? dueOn, System.DateTimeOffset? dueBefore, System.DateTimeOffset? dueAfter, bool? withoutDueDate, bool? excludeSubTasks, bool? active, bool? includeTaskLocalVariables, string tenantId, string tenantIdLike, bool? withoutTenantId, string candidateOrAssigned, string category, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (description != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("description") + "=").Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (priority != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("priority") + "=").Append(System.Uri.EscapeDataString(ConvertToString(priority, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minimumPriority != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minimumPriority") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minimumPriority, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maximumPriority != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maximumPriority") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maximumPriority, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (assignee != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("assignee") + "=").Append(System.Uri.EscapeDataString(ConvertToString(assignee, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (assigneeLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("assigneeLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(assigneeLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (owner != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("owner") + "=").Append(System.Uri.EscapeDataString(ConvertToString(owner, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ownerLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ownerLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ownerLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unassigned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unassigned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unassigned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (delegationState != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("delegationState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(delegationState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (candidateUser != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("candidateUser") + "=").Append(System.Uri.EscapeDataString(ConvertToString(candidateUser, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (candidateGroup != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("candidateGroup") + "=").Append(System.Uri.EscapeDataString(ConvertToString(candidateGroup, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (candidateGroups != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("candidateGroups") + "=").Append(System.Uri.EscapeDataString(ConvertToString(candidateGroups, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (involvedUser != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("involvedUser") + "=").Append(System.Uri.EscapeDataString(ConvertToString(involvedUser, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskDefinitionKey != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskDefinitionKey") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskDefinitionKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (taskDefinitionKeyLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("taskDefinitionKeyLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(taskDefinitionKeyLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseInstanceIdWithChildren != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseInstanceIdWithChildren") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseInstanceIdWithChildren, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (caseDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("caseDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(caseDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdOn") + "=").Append(System.Uri.EscapeDataString(createdOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdBefore") + "=").Append(System.Uri.EscapeDataString(createdBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdAfter") + "=").Append(System.Uri.EscapeDataString(createdAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueOn") + "=").Append(System.Uri.EscapeDataString(dueOn.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueBefore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueBefore") + "=").Append(System.Uri.EscapeDataString(dueBefore.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dueAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dueAfter") + "=").Append(System.Uri.EscapeDataString(dueAfter.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutDueDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutDueDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutDueDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (excludeSubTasks != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("excludeSubTasks") + "=").Append(System.Uri.EscapeDataString(ConvertToString(excludeSubTasks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (active != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("active") + "=").Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeTaskLocalVariables != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeTaskLocalVariables") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeTaskLocalVariables, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (candidateOrAssigned != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("candidateOrAssigned") + "=").Append(System.Uri.EscapeDataString(ConvertToString(candidateOrAssigned, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (category != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("category") + "=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseTaskResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates a parameter was passed in the wrong format or that delegationState has an invalid value (other than pending and resolved). The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Create Task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TaskResponse> CreateTaskAsync(TaskRequest body)
        {
            return CreateTaskAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskResponse> CreateTaskAsync(TaskRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates request was successful and the tasks are returned", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates a parameter was passed in the wrong format or that delegationState has an invalid value (other than pending and resolved). The status-message contains additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a task</summary>
        /// <returns>Indicates the task was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TaskResponse> GetTaskAsync(string taskId)
        {
            return GetTaskAsync(taskId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a task</summary>
        /// <returns>Indicates the task was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskResponse> GetTaskAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Tasks actions</summary>
        /// <returns>Indicates the action was executed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ExecuteTaskActionAsync(string taskId, TaskActionRequest body)
        {
            return ExecuteTaskActionAsync(taskId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Tasks actions</summary>
        /// <returns>Indicates the action was executed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ExecuteTaskActionAsync(string taskId, TaskActionRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("When the body contains an invalid value or when the assignee is missing when the action requires it.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the action cannot be performed due to a conflict. Either the task was updates simultaneously or the task was claimed by another user, in case of the claim action.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Update a task</summary>
        /// <returns>Indicates the task was updated.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TaskResponse> UpdateTaskAsync(string taskId, TaskRequest body)
        {
            return UpdateTaskAsync(taskId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a task</summary>
        /// <returns>Indicates the task was updated.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskResponse> UpdateTaskAsync(string taskId, TaskRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was updated simultaneously.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a task</summary>
        /// <param name="cascadeHistory">Whether or not to delete the HistoricTask instance when deleting the task (if applicable). If not provided, this value defaults to false.</param>
        /// <param name="deleteReason">Reason why the task is deleted. This value is ignored when cascadeHistory is true.</param>
        /// <returns>Indicates the task was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteTaskAsync(string taskId, string cascadeHistory, string deleteReason)
        {
            return DeleteTaskAsync(taskId, cascadeHistory, deleteReason, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a task</summary>
        /// <param name="cascadeHistory">Whether or not to delete the HistoricTask instance when deleting the task (if applicable). If not provided, this value defaults to false.</param>
        /// <param name="deleteReason">Reason why the task is deleted. This value is ignored when cascadeHistory is true.</param>
        /// <returns>Indicates the task was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteTaskAsync(string taskId, string cascadeHistory, string deleteReason, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}?");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            if (cascadeHistory != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("cascadeHistory") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cascadeHistory, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deleteReason != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deleteReason") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deleteReason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task cannot be deleted because it\u2019s part of a workflow.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a task form</summary>
        /// <returns>Indicates request was successful and the task form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetTaskForm2Async(string taskId)
        {
            return GetTaskForm2Async(taskId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a task form</summary>
        /// <returns>Indicates request was successful and the task form is returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetTaskForm2Async(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/form");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List identity links for a task</summary>
        /// <returns>Indicates the task was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListTasksInstanceIdentityLinksAsync(string taskId)
        {
            return ListTasksInstanceIdentityLinksAsync(taskId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List identity links for a task</summary>
        /// <returns>Indicates the task was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListTasksInstanceIdentityLinksAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/identitylinks");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RestIdentityLink>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Create an identity link on a task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestIdentityLink> CreateTaskInstanceIdentityLinksAsync(string taskId, RestIdentityLink body)
        {
            return CreateTaskInstanceIdentityLinksAsync(taskId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an identity link on a task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestIdentityLink> CreateTaskInstanceIdentityLinksAsync(string taskId, RestIdentityLink body, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/identitylinks");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestIdentityLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the task was found and the identity link was created.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found or the task does not have the requested identityLink. The status contains additional information about this error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List identity links for a task for either groups or users</summary>
        /// <returns>Indicates the task was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListIdentityLinksForFamilyAsync(string taskId, string family)
        {
            return ListIdentityLinksForFamilyAsync(taskId, family, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List identity links for a task for either groups or users</summary>
        /// <returns>Indicates the task was found and the requested identity links are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestIdentityLink>> ListIdentityLinksForFamilyAsync(string taskId, string family, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            if (family == null)
                throw new System.ArgumentNullException("family");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/identitylinks/{family}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{family}", System.Uri.EscapeDataString(ConvertToString(family, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RestIdentityLink>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a single identity link on a task</summary>
        /// <returns>Indicates the task and identity link was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestIdentityLink> GetTaskInstanceIdentityLinksAsync(string taskId, string family, string identityId, string type)
        {
            return GetTaskInstanceIdentityLinksAsync(taskId, family, identityId, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single identity link on a task</summary>
        /// <returns>Indicates the task and identity link was found and returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestIdentityLink> GetTaskInstanceIdentityLinksAsync(string taskId, string family, string identityId, string type, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            if (family == null)
                throw new System.ArgumentNullException("family");

            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            if (type == null)
                throw new System.ArgumentNullException("type");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{family}", System.Uri.EscapeDataString(ConvertToString(family, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{identityId}", System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{type}", System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestIdentityLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found or the task does not have the requested identityLink. The status contains additional information about this error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete an identity link on a task</summary>
        /// <returns>Indicates the task and identity link were found and the link has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteTaskInstanceIdentityLinksAsync(string taskId, string family, string identityId, string type)
        {
            return DeleteTaskInstanceIdentityLinksAsync(taskId, family, identityId, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an identity link on a task</summary>
        /// <returns>Indicates the task and identity link were found and the link has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteTaskInstanceIdentityLinksAsync(string taskId, string family, string identityId, string type, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            if (family == null)
                throw new System.ArgumentNullException("family");

            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            if (type == null)
                throw new System.ArgumentNullException("type");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{family}", System.Uri.EscapeDataString(ConvertToString(family, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{identityId}", System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{type}", System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found or the task does not have the requested identityLink. The status contains additional information about this error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List of sub tasks for a task</summary>
        /// <returns>Indicates request was successful and the  sub tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskResponse>> ListTaskSubtasksAsync(string taskId)
        {
            return ListTaskSubtasksAsync(taskId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List of sub tasks for a task</summary>
        /// <returns>Indicates request was successful and the  sub tasks are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskResponse>> ListTaskSubtasksAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/subtasks");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TaskResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List variables for a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestVariable>> ListTaskVariablesAsync(string taskId, string scope)
        {
            return ListTaskVariablesAsync(taskId, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List variables for a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RestVariable>> ListTaskVariablesAsync(string taskId, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/variables?");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            if (scope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RestVariable>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found..", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Create new variables on a task</summary>
        /// <param name="body">Create a variable on a task</param>
        /// <param name="name">Required name of the variable</param>
        /// <param name="type">Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double)</param>
        /// <param name="scope">Scope of variable that is created. If omitted, local is assumed.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> CreateTaskVariableAsync(string taskId, TaskVariableCollectionResource body, string name, string type, string scope)
        {
            return CreateTaskVariableAsync(taskId, body, name, type, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new variables on a task</summary>
        /// <param name="body">Create a variable on a task</param>
        /// <param name="name">Required name of the variable</param>
        /// <param name="type">Type of variable that is created. If omitted, reverts to raw JSON-value type (string, boolean, integer or double)</param>
        /// <param name="scope">Scope of variable that is created. If omitted, local is assumed.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> CreateTaskVariableAsync(string taskId, TaskVariableCollectionResource body, string name, string type, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/variables");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 201)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the variables were created and the result is returned.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the name of a variable to create was missing or that an attempt is done to create a variable on a standalone task (without a process associated) with scope global or an empty array of variables was included in the request or request did not contain an array of variables. Status message provides additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the task already has a variable with the given name. Use the PUT method to update the task variable instead.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the serializable data contains an object for which no class is present in the JVM running the Flowable engine and therefore cannot be deserialized.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete all local variables on a task</summary>
        /// <returns>Indicates all local task variables have been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAllLocalTaskVariablesAsync(string taskId)
        {
            return DeleteAllLocalTaskVariablesAsync(taskId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete all local variables on a task</summary>
        /// <returns>Indicates all local task variables have been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAllLocalTaskVariablesAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/variables");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a variable from a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestVariable> GetTaskInstanceVariableAsync(string taskId, string variableName, string scope)
        {
            return GetTaskInstanceVariableAsync(taskId, variableName, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a variable from a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestVariable> GetTaskInstanceVariableAsync(string taskId, string variableName, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/variables/{variableName}?");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));
            if (scope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestVariable>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found or the task does not have a variable with the given name (in the given scope). Status message provides additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Update an existing variable on a task</summary>
        /// <param name="body">Update a task variable</param>
        /// <param name="name">Required name of the variable</param>
        /// <param name="type">Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double)</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable..</param>
        /// <returns>Indicates the variables was updated and the result is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RestVariable> UpdateTaskInstanceVariableAsync(string taskId, string variableName, TaskVariableResource body, string name, string type, string scope)
        {
            return UpdateTaskInstanceVariableAsync(taskId, variableName, body, name, type, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an existing variable on a task</summary>
        /// <param name="body">Update a task variable</param>
        /// <param name="name">Required name of the variable</param>
        /// <param name="type">Type of variable that is updated. If omitted, reverts to raw JSON-value type (string, boolean, integer or double)</param>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable..</param>
        /// <returns>Indicates the variables was updated and the result is returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RestVariable> UpdateTaskInstanceVariableAsync(string taskId, string variableName, TaskVariableResource body, string name, string type, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/variables/{variableName}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestVariable>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the name of a variable to update was missing or that an attempt is done to update a variable on a standalone task (without a process associated) with scope global. Status message provides additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found or the task does not have a variable with the given name in the given scope. Status message contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the serializable data contains an object for which no class is present in the JVM running the Flowable engine and therefore cannot be deserialized.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a variable on a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task variable was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteTaskInstanceVariableAsync(string taskId, string variableName, string scope)
        {
            return DeleteTaskInstanceVariableAsync(taskId, variableName, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete a variable on a task</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task variable was found and has been deleted. Response-body is intentionally empty.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteTaskInstanceVariableAsync(string taskId, string variableName, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/variables/{variableName}?");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));
            if (scope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found or the task does not have a variable with the given name. Status message contains additional information about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get the binary data for a variable</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetTaskVariableDataAsync(string taskId, string variableName, string scope)
        {
            return GetTaskVariableDataAsync(taskId, variableName, scope, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the binary data for a variable</summary>
        /// <param name="scope">Scope of variable to be returned. When local, only task-local variable value is returned. When global, only variable value from the task’s parent execution-hierarchy are returned. When the parameter is omitted, a local variable will be returned if it exists, otherwise a global variable.</param>
        /// <returns>Indicates the task was found and the requested variables are returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<byte[]>> GetTaskVariableDataAsync(string taskId, string variableName, string scope, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");

            if (variableName == null)
                throw new System.ArgumentNullException("variableName");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("cmmn-runtime/tasks/{taskId}/variables/{variableName}/data?");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{variableName}", System.Uri.EscapeDataString(ConvertToString(variableName, System.Globalization.CultureInfo.InvariantCulture)));
            if (scope != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scope") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<byte[]>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested task was not found or the task does not have a variable with the given name (in the given scope). Status message provides additional information.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new FlowableHttpClientException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new FlowableHttpClientException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
