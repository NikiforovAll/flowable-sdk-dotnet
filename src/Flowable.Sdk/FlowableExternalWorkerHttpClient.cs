//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Flowable.Sdk.ExternalWorker.Models;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Flowable.Sdk.ExternalWorker
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FlowableExternalWorkerHttpClient : IFlowableExternalWorkerHttpClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public FlowableExternalWorkerHttpClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);


        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <summary>Acquire External Worker Jobs</summary>
        /// <returns>Indicates the jobs were acquired and locked.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AcquiredExternalWorkerJobResponse>> AcquireAndLockJobsAsync(AcquireExternalWorkerJobRequest body)
        {
            return AcquireAndLockJobsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Acquire External Worker Jobs</summary>
        /// <returns>Indicates the jobs were acquired and locked.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AcquiredExternalWorkerJobResponse>> AcquireAndLockJobsAsync(AcquireExternalWorkerJobRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("acquire/jobs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AcquiredExternalWorkerJobResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the request was invalid.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the user does not have the rights acquire the jobs.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Complete an External Worker Job with a BPMN Error</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task BpmnErrorJobAsync(string jobId, ExternalWorkerJobErrorRequest body)
        {
            return BpmnErrorJobAsync(jobId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete an External Worker Job with a BPMN Error</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task BpmnErrorJobAsync(string jobId, ExternalWorkerJobErrorRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("acquire/jobs/{jobId}/bpmnError");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the request was invalid.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the user does not have the rights complete the job.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the job does not exist.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Complete an External Worker Job with a cmmn terminate transition</summary>
        /// <returns>Indicates the job was successfully transitioned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task TerminateCmmnJobAsync(string jobId, ExternalWorkerJobTerminateRequest body)
        {
            return TerminateCmmnJobAsync(jobId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete an External Worker Job with a cmmn terminate transition</summary>
        /// <returns>Indicates the job was successfully transitioned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task TerminateCmmnJobAsync(string jobId, ExternalWorkerJobTerminateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("acquire/jobs/{jobId}/cmmnTerminate");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the request was invalid.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the user does not have the rights complete the job.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the job does not exist.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Complete an External Worker Jobs</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CompleteJobAsync(string jobId, ExternalWorkerJobCompleteRequest body)
        {
            return CompleteJobAsync(jobId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Complete an External Worker Jobs</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CompleteJobAsync(string jobId, ExternalWorkerJobCompleteRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("acquire/jobs/{jobId}/complete");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the request was invalid.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the user does not have the rights complete the job.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the job does not exist.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fail an External Worker Job</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task FailJobAsync(string jobId, ExternalWorkerJobFailureRequest body)
        {
            return FailJobAsync(jobId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fail an External Worker Job</summary>
        /// <returns>Indicates the job was successfully completed.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task FailJobAsync(string jobId, ExternalWorkerJobFailureRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("acquire/jobs/{jobId}/fail");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the request was invalid.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the user does not have the rights complete the job.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the job does not exist.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>List External Worker Jobs</summary>
        /// <param name="elementId">Only return jobs with the given elementId</param>
        /// <param name="elementName">Only return jobs with the given elementName</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="executionId">Only return jobs with the given executionId</param>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="locked">Only return jobs that are locked</param>
        /// <param name="processDefinitionId">Only return jobs with the given processDefinitionId</param>
        /// <param name="processInstanceId">Only return jobs with the processInstanceId</param>
        /// <param name="scopeDefinitionId">Only return jobs with the given scopeDefinitionId</param>
        /// <param name="scopeId">Only return jobs with the given scopeId</param>
        /// <param name="subScopeId">Only return jobs with the given subScopeId</param>
        /// <param name="tenantId">Only return jobs with the given tenant id</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value</param>
        /// <param name="unlocked">Only return jobs that are unlocked</param>
        /// <param name="withException">Only return jobs with an exception</param>
        /// <param name="withoutTenantId">Only return jobs without a tenantId</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DataResponseExternalWorkerJobResponse> ListExternalWorkerJobsAsync(string elementId, string elementName, string exceptionMessage, string executionId, string id, bool? locked, string processDefinitionId, string processInstanceId, string scopeDefinitionId, string scopeId, string subScopeId, string tenantId, string tenantIdLike, bool? unlocked, bool? withException, bool? withoutTenantId)
        {
            return ListExternalWorkerJobsAsync(elementId, elementName, exceptionMessage, executionId, id, locked, processDefinitionId, processInstanceId, scopeDefinitionId, scopeId, subScopeId, tenantId, tenantIdLike, unlocked, withException, withoutTenantId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List External Worker Jobs</summary>
        /// <param name="elementId">Only return jobs with the given elementId</param>
        /// <param name="elementName">Only return jobs with the given elementName</param>
        /// <param name="exceptionMessage">Only return jobs with the given exception message</param>
        /// <param name="executionId">Only return jobs with the given executionId</param>
        /// <param name="id">Only return job with the given id</param>
        /// <param name="locked">Only return jobs that are locked</param>
        /// <param name="processDefinitionId">Only return jobs with the given processDefinitionId</param>
        /// <param name="processInstanceId">Only return jobs with the processInstanceId</param>
        /// <param name="scopeDefinitionId">Only return jobs with the given scopeDefinitionId</param>
        /// <param name="scopeId">Only return jobs with the given scopeId</param>
        /// <param name="subScopeId">Only return jobs with the given subScopeId</param>
        /// <param name="tenantId">Only return jobs with the given tenant id</param>
        /// <param name="tenantIdLike">Only return jobs with a tenantId like the given value</param>
        /// <param name="unlocked">Only return jobs that are unlocked</param>
        /// <param name="withException">Only return jobs with an exception</param>
        /// <param name="withoutTenantId">Only return jobs without a tenantId</param>
        /// <returns>Indicates the requested jobs were returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DataResponseExternalWorkerJobResponse> ListExternalWorkerJobsAsync(string elementId, string elementName, string exceptionMessage, string executionId, string id, bool? locked, string processDefinitionId, string processInstanceId, string scopeDefinitionId, string scopeId, string subScopeId, string tenantId, string tenantIdLike, bool? unlocked, bool? withException, bool? withoutTenantId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("jobs?");
            if (elementId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("elementId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(elementId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (elementName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("elementName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(elementName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exceptionMessage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exceptionMessage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exceptionMessage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (executionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("executionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(executionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (locked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processInstanceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processInstanceId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(processInstanceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (scopeDefinitionId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scopeDefinitionId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scopeDefinitionId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (scopeId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("scopeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(scopeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (subScopeId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subScopeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subScopeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tenantIdLike != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tenantIdLike") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tenantIdLike, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (unlocked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("unlocked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unlocked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withException != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withException") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withException, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (withoutTenantId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("withoutTenantId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(withoutTenantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DataResponseExternalWorkerJobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates an illegal value has been used in a url query parameter. Status description contains additional details about the error.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the user does not have the rights to query for external worker jobs.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Get a single external worker job</summary>
        /// <returns>Indicates the requested job was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExternalWorkerJobResponse> GetExternalWorkerJobAsync(string jobId)
        {
            return GetExternalWorkerJobAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single external worker job</summary>
        /// <returns>Indicates the requested job was returned.</returns>
        /// <exception cref="FlowableHttpClientException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExternalWorkerJobResponse> GetExternalWorkerJobAsync(string jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("jobs/{jobId}");
            urlBuilder_.Replace("{jobId}", System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExternalWorkerJobResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new FlowableHttpClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the user does not have the rights access the job.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("Indicates the requested job was not found.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new FlowableHttpClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new FlowableHttpClientException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new FlowableHttpClientException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
